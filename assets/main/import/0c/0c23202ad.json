[1,["dceKxx6LtMiZEVcbzmzEko","c0ExG6bCNHv7BScpvr46Qr@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","8dHjmY6jhBM7YJD19BR6YA@f9941","957Y4ui01C44iECl0G0/n0@f9941","38nGNkcPFMXI9fJvNZ9bz3@f9941","c9nhQb8U9AIKuzEzP78ygt@f9941","afP/lR7e9MfqHcdVXgYPzY@f9941","5cxfD0Q91AXKnAYkfRv6Gw@73b7f","f2+777fQZDMqWHbDIWXFJA@f9941","59bJZYG5tDJ7ELKUmYfmuw@f9941","c3rQ4CD15BvKxmfuEb3RGM@f9941","deQgAK58dAY7cTgFqTXEX+@f9941","ddrGd/jKdGH6/ZIe6KMetg@f9941","44GmRzoDBIDrEAL1fH2Q5U@f9941","37LvwjW+VPiqRcON1lpg+E@f9941","5bXmlPTRVM9I9B4KHreWgR@f9941","5cxfD0Q91AXKnAYkfRv6Gw@f605f","5cxfD0Q91AXKnAYkfRv6Gw@438fe","52i6pgbXBORoy7vA+X0VA+@f9941","84Eip2kD1FeIJKKKwM0kYK@f9941","76fANB9Y1K7rJPjk8WILpE@f9941","2056wdhlZADJdfCpd+O52l@f9941","e32TzDrI5JV7W/FOR4p76Q@f9941","82QbxRzWJJj4n7mqJsPsMh@f9941","aa+G8B2exLEIbBP+5RK72d@f9941","e9XFLb9i5Oy4/XWlDk2Yla@f9941","baksN0ny5Ajbzh34OoiqXK@f9941","b2RaVqqQ5KHaI6A1a3NF3P@f9941","58ftAD36dAkbyR7OzO5HN9@f9941","15JrabkcZGwrQWiv0XGsvi@f9941","f0N5ZyemhJg5iZxBxHun4Y@f9941","ffuIqPr2JI9I8dPLYGRDpD@f9941","27chMo7S1Ba5pmNFASz/TL@f9941","4bSlmx4cVFvrHjUG64LuB6@f9941","4fx+4CJz9Jd61HbKFVv1MF@f9941","b3CpiafZRDH449MonBWD2o@f9941","ccSEOm3uZFw566I8GJuMvE@f9941","a52kK/VKhPWYrFcMzOHtmQ","2eKVxG9ytMmYoPQyNnGBGj@f9941","03+wHB/rFKYYZu5T6eMyq/@f9941","a1KZkqZL1MRb8F4DXtG2J5@f9941","e3gtlA63VIZrjX54R8CIRh@f9941","beGfQd/6BBxZyHa8JNhTUC@f9941","42SOhw4TdMK4ykuLhxKBy7@f9941","4ayFrqYNhPeJswa4xifxO5@f9941","afxHkx8GZGsJC+n+YfITQo@f9941","bey6303uNCjLzIjDHmr+a4@f9941","f3ijXqwy5KZJ0s28iGnL5L@f9941","b9gVk1MmBJc6/d6ysKk9lA@f9941","25h9W+0lxPRp5+EnDq6EQn@f9941","03+wHB/rFKYYZu5T6eMyq/@6c48a","0eGwHSAmlChpVBQo/ZvEe/@6c48a","0eRt9dqbpHbZXG1dyoxoQ/@6c48a","14IieDNr9LRJ/gL2XT4gBn@6c48a","15JrabkcZGwrQWiv0XGsvi@6c48a","15ixPDTw1IE5wzu8e+DKP5@6c48a","18JHC/JbhJ9YlrCJARk+tW@6c48a","19F0RUlJtKCbscW1N2UL61@6c48a","1bX5DgiURICZdheLjYNyYW@6c48a","1c60ceAHZLn6Dqbpowfj6b@6c48a","1eeVRGHctBOrfjx3wilJoX@6c48a","2056wdhlZADJdfCpd+O52l@6c48a","212jWhr3hExpNqcZOfxEF3@6c48a","27bFM/8Z5B+Zv92Yx7qOIf@6c48a","27chMo7S1Ba5pmNFASz/TL@6c48a","28pz1lCZlCOrwydpmw/9VE@6c48a","2cy/QXLWJKHZEHYw9brby2@6c48a","2eKVxG9ytMmYoPQyNnGBGj@6c48a","30Cx9pws9AqKFcax97HWfw@6c48a","37LvwjW+VPiqRcON1lpg+E@6c48a","38nGNkcPFMXI9fJvNZ9bz3@6c48a","3bagv1TAVFfpkocC4+hdC2@6c48a","3b8kKElPJF8ZhHyHvvS1ki@6c48a","42SOhw4TdMK4ykuLhxKBy7@6c48a","42bw2WdUVDEoCL0iHueEv5@6c48a","42pUve0FRMSYkm8FMJDmnF@6c48a","44GmRzoDBIDrEAL1fH2Q5U@6c48a","46s4s47htOk7+5UhgYr90H@6c48a","47GMWTU2hPob2HmUleN0Ki@6c48a","4ayFrqYNhPeJswa4xifxO5@6c48a","4bSlmx4cVFvrHjUG64LuB6@6c48a","4efRc8EW1HQaiS6u1u5IVI@6c48a","4fTgPxMfBPk4VAwMPLsxjF@6c48a","4fx+4CJz9Jd61HbKFVv1MF@6c48a","52i6pgbXBORoy7vA+X0VA+@6c48a","54ejgvm45FqZTywz8lD1fm@6c48a","58ftAD36dAkbyR7OzO5HN9@6c48a","59bJZYG5tDJ7ELKUmYfmuw@6c48a","5bXmlPTRVM9I9B4KHreWgR@6c48a","5cUewJqfxHR6nyT1O46dn6@6c48a","5cxfD0Q91AXKnAYkfRv6Gw@e39f7","a3zQCfCrBCDZJ4uf2rk5u8","5cxfD0Q91AXKnAYkfRv6Gw@b4e6b","65Cp4tlEZK55E4GHhJ6/pp@6c48a","6bHJPbIyBPnKPuOme7iPFh@6c48a","6ciCT1eRlBYJbP3wDkkl90@6c48a","6ftPVHbvtACqZljC0rufHc@6c48a","39wB2fT6JPkK1QyPTDXMXm@6c48a","1brw/JvvpFnIvdrxpFCgMZ","73yIepYitHBoVchk3GwGT1@6c48a","76fANB9Y1K7rJPjk8WILpE@6c48a","7az8mBYelB4JK9AkjIfqS6@6c48a","82QbxRzWJJj4n7mqJsPsMh@6c48a","84Eip2kD1FeIJKKKwM0kYK@6c48a","8abH0ojEBArqZ2Yzh/LoN8@6c48a","8dHjmY6jhBM7YJD19BR6YA@6c48a","8fGC/47MBKtKbu817prghw@6c48a","957Y4ui01C44iECl0G0/n0@6c48a","9fdghPAJpPM6ps0IvZopwB@6c48a","9fuafV/PRLeZGkwd8rZXgM@6c48a","a0dRR+wHVG05qOgxMWK5Zu@6c48a","a1KZkqZL1MRb8F4DXtG2J5@6c48a","a4vgulFcxC7afwgzAe47zr@6c48a","a5/Tk5fk1OT4M3YkeyugyO@6c48a","a7YJzyJxhAKoUOH4gt0hkD@6c48a","a8/sSDBCRMTYuVKIwUgI4+@6c48a","aa+G8B2exLEIbBP+5RK72d@6c48a","acVf2TPV5O6pknusWqaHMS@6c48a","aePhLhb8BEvqKAI5c/aWK3@6c48a","afP/lR7e9MfqHcdVXgYPzY@6c48a","afSLMLCmxBF5oZRpecKJgq@6c48a","af+vHLzJ9JvZXY+R7ByiOZ@6c48a","b1pgtXwk1Ba5pioPgHPW2y@6c48a","b2RaVqqQ5KHaI6A1a3NF3P@6c48a","b2vHhrWQtIMbMhgTESoyCZ@6c48a","b3CpiafZRDH449MonBWD2o@6c48a","6ftPVHbvtACqZljC0rufHc@f9941","5cUewJqfxHR6nyT1O46dn6@f9941","30Cx9pws9AqKFcax97HWfw@f9941","0eRt9dqbpHbZXG1dyoxoQ/@f9941","65Cp4tlEZK55E4GHhJ6/pp@f9941","8abH0ojEBArqZ2Yzh/LoN8@f9941","1c60ceAHZLn6Dqbpowfj6b@f9941","4efRc8EW1HQaiS6u1u5IVI@f9941","212jWhr3hExpNqcZOfxEF3@f9941","0eGwHSAmlChpVBQo/ZvEe/@f9941","a8/sSDBCRMTYuVKIwUgI4+@f9941","46s4s47htOk7+5UhgYr90H@f9941","6bHJPbIyBPnKPuOme7iPFh@f9941","2cy/QXLWJKHZEHYw9brby2@f9941","4fTgPxMfBPk4VAwMPLsxjF@f9941","d845rIc3RPYrLzgtqyVdqK@f9941","7az8mBYelB4JK9AkjIfqS6@f9941","d5CuKKYsBEeo4OzUmEKs/l@f9941","b7qevBlvZJyYLjF6sr4VgF@f9941","f87vU+mcJLPo5nbPUEx7IN@f9941","9fuafV/PRLeZGkwd8rZXgM@f9941","d8e+Z+OVxHrL0pC/8Lbk/I@f9941","14cvMSlnFJlqA2NMPzwb1B","84iy5lk7pEEb6EjoNt1bJf","68xNkbuiVAipWIifHltfxk","a4vgulFcxC7afwgzAe47zr@f9941","47GMWTU2hPob2HmUleN0Ki@f9941","99et/B3p5BgrZO5CfEzduf@f9941","b1pgtXwk1Ba5pioPgHPW2y@f9941","18JHC/JbhJ9YlrCJARk+tW@f9941","1eeVRGHctBOrfjx3wilJoX@f9941","a7YJzyJxhAKoUOH4gt0hkD@f9941","dflYbLyHVCGpMjOvO8iSlm@f9941","1bX5DgiURICZdheLjYNyYW@f9941","28pz1lCZlCOrwydpmw/9VE@f9941","b2vHhrWQtIMbMhgTESoyCZ@f9941","ceXzg9vlFFr7mcfXU9oBHa@f9941","14IieDNr9LRJ/gL2XT4gBn@f9941","f1wTLXr2JCOq5X0LiJ2YFZ@f9941","f480AFIm1B/Y9sn8s3NPU9@f9941","3bagv1TAVFfpkocC4+hdC2@f9941","afSLMLCmxBF5oZRpecKJgq@f9941","8fGC/47MBKtKbu817prghw@f9941","54ejgvm45FqZTywz8lD1fm@f9941","5asuPqtxJIDasBD0Gy6SsS","70jqOrfKpCNZ8ipVTiJAaH","5cxfD0Q91AXKnAYkfRv6Gw@d1932","a5/Tk5fk1OT4M3YkeyugyO@f9941","81JUI9LDxHgLSD3P1FMsBf","0cb0WVRpZHQJpB05qvwnNK","95vBxQpFZIRaUzWo2NL9Fr","f3EHG9KBpBT7hDzNV5b367@f9941","b7qevBlvZJyYLjF6sr4VgF@6c48a","b9gVk1MmBJc6/d6ysKk9lA@6c48a","beGfQd/6BBxZyHa8JNhTUC@6c48a","bey6303uNCjLzIjDHmr+a4@6c48a","c0ExG6bCNHv7BScpvr46Qr@6c48a","c3rQ4CD15BvKxmfuEb3RGM@6c48a","c9nhQb8U9AIKuzEzP78ygt@6c48a","ccSEOm3uZFw566I8GJuMvE@6c48a","ceXzg9vlFFr7mcfXU9oBHa@6c48a","d5CuKKYsBEeo4OzUmEKs/l@6c48a","d8e+Z+OVxHrL0pC/8Lbk/I@6c48a","d845rIc3RPYrLzgtqyVdqK@6c48a","e66M7XK/9PNoNcsS0s/RUX@f9941","15ixPDTw1IE5wzu8e+DKP5@f9941","eabKcMPatJKbXJuR2V0d5m@f9941","42pUve0FRMSYkm8FMJDmnF@f9941","19F0RUlJtKCbscW1N2UL61@f9941","aePhLhb8BEvqKAI5c/aWK3@f9941","a0dRR+wHVG05qOgxMWK5Zu@f9941","19UQ5aZ15Csr7VYiZu2kF7@f9941","d4733GKxlOma0Jf2xocNWC@f9941","9fdghPAJpPM6ps0IvZopwB@f9941","af+vHLzJ9JvZXY+R7ByiOZ@f9941","acVf2TPV5O6pknusWqaHMS@f9941","f9cCFo8YpDyJPMj0ur5qnI@f9941","6ciCT1eRlBYJbP3wDkkl90@f9941","27bFM/8Z5B+Zv92Yx7qOIf@f9941","3b8kKElPJF8ZhHyHvvS1ki@f9941","42bw2WdUVDEoCL0iHueEv5@f9941","73yIepYitHBoVchk3GwGT1@f9941","ddrGd/jKdGH6/ZIe6KMetg@6c48a","deQgAK58dAY7cTgFqTXEX+@6c48a","dflYbLyHVCGpMjOvO8iSlm@6c48a","e3gtlA63VIZrjX54R8CIRh@6c48a","e32TzDrI5JV7W/FOR4p76Q@6c48a","e66M7XK/9PNoNcsS0s/RUX@6c48a","e9XFLb9i5Oy4/XWlDk2Yla@6c48a","eabKcMPatJKbXJuR2V0d5m@6c48a","f0N5ZyemhJg5iZxBxHun4Y@6c48a","f1wTLXr2JCOq5X0LiJ2YFZ@6c48a","f2+777fQZDMqWHbDIWXFJA@6c48a","f3EHG9KBpBT7hDzNV5b367@6c48a","f3ijXqwy5KZJ0s28iGnL5L@6c48a","f480AFIm1B/Y9sn8s3NPU9@6c48a","f87vU+mcJLPo5nbPUEx7IN@6c48a","f9cCFo8YpDyJPMj0ur5qnI@6c48a"],["node","_spriteFrame","_textureSource","_parent","_normalSprite","_target","asset","_hoverSprite","_pressedSprite","_disabledSprite","_defaultClip","_effectAsset","root","data","_mesh","_skeleton","progressBar","labelCount","labelTimer","mainTexture","albedoMap","challengeUI","shopUI","backPackUI","menuAnim","_cameraComponent","btnHideSub","btnShowSub","subBtnsAnim","scene","_verticalScrollBar","anim","_scrollView","prefab","slotPrefab","spBorder","spAttribute","spRank","spHero","labelLevel"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_parent","_children","_components","_lpos","_prefab","_lrot","_euler","_lscale"],0,1,2,9,5,4,5,5,5],["cc.Widget",["_alignFlags","_alignMode","_top","_originalWidth","_bottom","_originalHeight","_left","_right","_name","node"],-6,1],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_lineHeight","_horizontalAlign","_srcBlendFactor","_enableWrapText","_verticalAlign","node","_color","__prefab"],-6,1,5,4],["cc.Sprite",["_sizeMode","_type","_name","node","_spriteFrame","__prefab","_color"],0,1,6,4,5],["cc.Node",["_name","_layer","_children","_prefab","_lpos","_lrot","_euler","_parent","_components"],1,12,4,5,5,5,1,12],["cc.Node",["_name","_layer","_active","_children","_components","_parent","_lpos"],0,2,12,1,5],["cc.UITransform",["_name","node","_contentSize","_anchorPoint","__prefab"],2,1,5,5,4],["cc.Layout",["_layoutType","_isAlign","_spacingX","_paddingLeft","_paddingRight","_resizeMode","_spacingY","node","__prefab"],-4,1,4],["cc.Button",["_name","node","_normalColor","_target","_normalSprite","clickEvents","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,5,1,6,9,6,6,6],["cc.Node",["_name","_layer","_parent","_lpos","_children","_lrot","_euler","_prefab","_components"],1,1,5,9,5,5,4,2],["cc.Material",["_states","_defines","_name","_props"],0,12],["cc.Prefab",["_name"],2],["cc.SkeletalAnimation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["aeffbvAe81PUK6yo5lqC9d9",["node","scaleTo"],3,1,5],["cc.ScrollView",["_name","bounceDuration","brake","horizontal","node","_content","_verticalScrollBar"],-1,1,1,1],["cc.ScrollBar",["_direction","node","_handle","_scrollView"],2,1,1,1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","asset"],2,1,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["edc2a7itdpDQ5BDY+sVWkwJ",["node","menuAnim","backPackUI","shopUI","challengeUI"],3,1,1,1,1,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.BlockInputEvents",["node"],3,1],["ee01cuuXWdKPp3K6ZSH+XiO",["timeToRecover","totalCount","currentCount","node","labelTimer","labelCount","progressBar"],0,1,1,1,1],["bc2c4zW09lHwpndXfuPHzZv",["node","subBtnsAnim","btnShowSub","btnHideSub","btnContainer"],3,1,1,1,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.PrefabLink",["node","prefab"],3,1,6],["cc.Mask",["node"],3,1],["cc.LabelOutline",["node"],3,1],["cc.UIMeshRenderer",["node","__prefab"],3,1,4],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_bias","_near","_far","_shadowDistance","_saturation"],-2],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["731777n3LdF7rEriG3jUd4K",["node"],3,1],["0d6f9QGL49Fa4UGVF9fmZrd",["node","figure","btnsNode","chargeUI"],3,1,1,1,1],["cc.Animation",["_name","node","_clips"],2,1,3],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite"],1,1,1],["88c12+9VW9MSa0k23tDsf+r",["totalCount","node","scrollView"],2,1,1],["6cf851wT2xK+7apBEpV2PF2",["node","roleClkArea","role"],3,1,1,1],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_visibility","node","_color"],-2,1,5],["57d15BvDjxLBLxQT6h/Vxab",["node","__prefab","sfAttributes","sfRanks","sfHeroes","sfBorders","labelLevel","spHero","spRank","spAttribute","spBorder","spStars"],3,1,4,3,3,3,3,1,1,1,1,1,2]],[[7,1,2,1],[1,0,1,3,4,5,6,3],[1,0,1,3,5,6,3],[4,3,4,1],[14,0,1,2,2],[4,0,3,4,2],[19,0,2],[1,0,1,3,5,3],[7,1,2,3,1],[15,0,1],[9,1,2,3,4,1],[4,1,0,3,4,3],[2,0,4,1,9,4],[20,0,1,2,2],[5,0,1,7,8,4,3],[7,1,4,2,1],[2,0,3,5,1,9,5],[4,1,3,4,2],[31,0,1,2,3],[1,0,3,7,6,8,9,2],[1,0,1,3,6,8,9,3],[5,0,1,7,8,3,4,3],[4,3,5,1],[2,0,1,9,3],[1,0,3,4,7,6,8,9,2],[1,0,1,3,4,6,8,9,3],[10,0,2,4,7,3,5,6,2],[10,0,1,2,4,3,5,6,3],[4,0,3,6,4,2],[7,0,1,2,2],[9,1,5,2,3,4,1],[9,1,2,3,4,6,7,8,1],[1,0,3,7,6,2],[1,0,3,4,7,2],[1,0,1,3,6,3],[1,0,1,3,4,5,3],[1,0,1,3,4,3],[2,0,2,1,9,4],[2,0,3,1,9,4],[4,1,0,3,3],[28,0,1],[15,0,1,1],[1,0,1,4,5,6,3],[6,0,1,5,3,4,3],[2,0,2,4,3,5,1,9,7],[4,2,0,3,4,3],[9,1,5,2,3,4,6,7,8,1],[3,0,1,2,3,9,5],[3,6,0,1,2,3,7,9,10,7],[3,0,5,8,1,2,4,9,10,7],[34,0,1],[45,0,1,2,2],[1,0,3,7,8,9,2],[1,0,3,4,7,8,9,2],[1,0,1,4,5,3],[1,0,1,3,8,9,3],[1,0,1,3,5,6,10,3],[1,0,1,3,5,10,3],[1,0,1,3,4,8,9,3],[5,0,1,7,8,3,3],[6,0,2,1,3,4,4],[6,0,2,1,3,4,6,4],[6,0,1,5,3,4,6,3],[21,0,1,2,3,4,5,6,1],[22,1],[7,0,1,2,3,2],[2,0,6,7,2,4,3,5,1,9,9],[2,0,6,2,1,9,5],[2,0,5,1,9,4],[8,5,0,2,6,1,7,6],[29,0,1,2,3,4,5,6,4],[9,0,1,5,2,3,2],[33,0,1],[3,0,1,9,3],[3,0,1,2,4,3,9,10,6],[3,0,1,2,4,9,10,5],[3,0,5,1,2,9,10,5],[3,0,5,1,2,4,9,10,6],[46,0,1,2,3,3],[18,0,1,2,3,4],[11,2,0,1,3,4],[11,0,1,3,3],[12,1],[12,0,2],[1,0,4,5,7,2],[1,0,3,5,7,2],[1,0,1,2,4,5,6,4],[1,0,1,4,5,6,10,3],[1,0,1,4,5,7,6,3],[1,0,1,3,4,5,7,6,3],[5,0,2,3,4,5,6,2],[5,0,2,3,2],[5,0,2,3,5,6,2],[5,0,1,2,4,5,6,3],[5,0,1,2,3],[5,0,1,2,5,6,3],[10,0,1,2,8,3,3],[6,0,1,3,4,3],[6,0,2,1,5,3,4,4],[6,0,1,3,4,6,3],[13,1,2,3,4,1],[13,0,1,2,3,4,2],[14,0,2],[23,0,1,2,3],[24,0,1,2,4],[25,0,2],[7,1,1],[7,1,4,2,3,1],[2,0,9,2],[2,0,7,2,1,9,5],[2,8,0,4,1,9,5],[2,0,2,4,1,9,5],[2,0,6,7,2,3,1,9,7],[26,0,1,2,3,4,1],[27,0,1,1],[4,2,3,4,2],[4,3,1],[4,0,3,5,2],[8,0,3,4,1,7,5],[8,0,3,4,2,1,7,6],[8,0,1,7,3],[8,0,2,1,7,8,4],[30,0,1,2,3,4,1],[32,0,1,1],[3,0,1,2,9,10,4],[3,0,1,2,9,4],[3,0,1,2,4,3,9,6],[3,0,1,2,3,9,11,5],[35,0,1,1],[16,0,1,2,3,4,5,5],[16,0,1,2,3,4,5,6,5],[36,0,1,2,3,2],[37,0,1,2,3,4,1],[38,0,1,2,2],[39,0,1,2,3,4,6],[40,1],[41,0,1],[42,1],[43,0,1],[44,0,1,2,3,1],[17,0,1,3,2,2],[17,0,1,2,2],[47,0,1,2,2],[48,0,1,2,1],[49,0,1,2,3,4,5,6,6],[50,0,1,2,3,4,5,6,7,8,9,10,11,1]],[[[{"name":"btn_level","rect":{"x":0,"y":5,"width":92,"height":105},"offset":{"x":0,"y":-2.5},"originalSize":{"width":92,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[53]],[[{"name":"text_be_vip","rect":{"x":0,"y":0,"width":117,"height":39},"offset":{"x":0,"y":0},"originalSize":{"width":117,"height":39},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[54]],[[{"name":"text_chongzhi","rect":{"x":0,"y":0,"width":118,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":118,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[55]],[[{"name":"text_evolve","rect":{"x":0,"y":0,"width":75,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":75,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[56]],[[{"name":"bg_panel_red","rect":{"x":0,"y":0,"width":564,"height":378},"offset":{"x":0,"y":0},"originalSize":{"width":564,"height":378},"rotated":false,"capInsets":[0,89,0,125],"packable":true}],[0],0,[0],[2],[57]],[[{"name":"att_earth","rect":{"x":0,"y":0,"width":36,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[58]],[[{"name":"icon_energy","rect":{"x":0,"y":0,"width":55,"height":63},"offset":{"x":0,"y":0},"originalSize":{"width":55,"height":63},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[59]],[[{"name":"b_highlight","rect":{"x":5,"y":6,"width":57,"height":50},"offset":{"x":0.5,"y":-2},"originalSize":{"width":66,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[60]],[[{"name":"title_craft","rect":{"x":0,"y":0,"width":130,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":130,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[61]],[[{"name":"text_sm_chongzhi","rect":{"x":0,"y":0,"width":67,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":67,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[62]],[[{"name":"btn_expand_slot","rect":{"x":0,"y":0,"width":131,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":131,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[63]],[[{"name":"btn_sm_blue","rect":{"x":0,"y":0,"width":130,"height":61},"offset":{"x":0,"y":0},"originalSize":{"width":130,"height":61},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[64]],[[{"name":"title_vip","rect":{"x":0,"y":0,"width":51,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":51,"height":26},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[65]],[[{"name":"ic_jones","rect":{"x":26,"y":31,"width":103,"height":92},"offset":{"x":2.5,"y":-2},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[66]],[[{"name":"btn_rongyu","rect":{"x":0,"y":0,"width":83,"height":65},"offset":{"x":0,"y":0},"originalSize":{"width":83,"height":65},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[67]],[[{"name":"title_atk","rect":{"x":0,"y":0,"width":92,"height":44},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":44},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[68]],[[{"name":"item2","rect":{"x":0,"y":0,"width":167,"height":119},"offset":{"x":0,"y":0},"originalSize":{"width":167,"height":119},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[69]],[[{"name":"btn_home","rect":{"x":2,"y":4,"width":76,"height":106},"offset":{"x":-2,"y":-2},"originalSize":{"width":84,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[70]],[[{"name":"bg_shop","rect":{"x":0,"y":0,"width":640,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":640,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[71]],[[{"name":"bg_panel_paper","rect":{"x":0,"y":0,"width":535,"height":184},"offset":{"x":0,"y":0},"originalSize":{"width":535,"height":184},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[72]],[[{"name":"btn_red","rect":{"x":0,"y":0,"width":154,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":154,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[73]],[[{"name":"txt_renwu","rect":{"x":0,"y":0,"width":57,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":57,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[74]],[[{"name":"ic_jingke","rect":{"x":30,"y":34,"width":92,"height":87},"offset":{"x":1,"y":-2.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[75]],[[{"name":"btn_setting","rect":{"x":5,"y":5,"width":80,"height":105},"offset":{"x":-1,"y":-2.5},"originalSize":{"width":92,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[76]],[[{"name":"rare2","rect":{"x":3,"y":9,"width":95,"height":119},"offset":{"x":0.5,"y":-4},"originalSize":{"width":100,"height":129},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[77]],[[{"name":"s_highlight","rect":{"x":5,"y":6,"width":57,"height":50},"offset":{"x":0.5,"y":-2},"originalSize":{"width":66,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[78]],[[{"name":"banner_gradient","rect":{"x":0,"y":0,"width":181,"height":33},"offset":{"x":0,"y":0},"originalSize":{"width":181,"height":33},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[79]],[[{"name":"banner_red_long","rect":{"x":0,"y":0,"width":548,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":548,"height":62},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[80]],[[{"name":"icon_diamond","rect":{"x":0,"y":0,"width":57,"height":53},"offset":{"x":0,"y":0},"originalSize":{"width":57,"height":53},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[81]],[[{"name":"timer_bar","rect":{"x":0,"y":0,"width":194,"height":10},"offset":{"x":0,"y":0},"originalSize":{"width":194,"height":10},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[82]],[[{"name":"btn_liuyan","rect":{"x":0,"y":0,"width":74,"height":63},"offset":{"x":0,"y":0},"originalSize":{"width":74,"height":63},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[83]],[[{"name":"text_duihuan","rect":{"x":0,"y":0,"width":67,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":67,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[84]],[[{"name":"item3","rect":{"x":0,"y":0,"width":167,"height":119},"offset":{"x":0,"y":0},"originalSize":{"width":167,"height":119},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[85]],[[{"name":"btn_renwu","rect":{"x":0,"y":0,"width":74,"height":65},"offset":{"x":0,"y":0},"originalSize":{"width":74,"height":65},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[86]],[[{"name":"bg_gradient_mask","rect":{"x":0,"y":0,"width":640,"height":288},"offset":{"x":0,"y":151.5},"originalSize":{"width":640,"height":591},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[87]],[[{"name":"bg_sub_btns","rect":{"x":0,"y":0,"width":625,"height":130},"offset":{"x":0,"y":0},"originalSize":{"width":625,"height":130},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[88]],[[{"name":"btn_backpack","rect":{"x":0,"y":0,"width":83,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":83,"height":66},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[89]],[[{"name":"bg_frame","rect":{"x":0,"y":0,"width":610,"height":626},"offset":{"x":0,"y":0},"originalSize":{"width":610,"height":626},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[90]],[[{"name":"bg_status","rect":{"x":0,"y":0,"width":188,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":188,"height":54},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[91]],[[{"name":"background_png","rect":{"x":0,"y":0,"width":640,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":640,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[92]],[[[79,"Skin-0",1965591131,["RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_leg_L_front_00","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_leg_L_back_01","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_neck_02","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_neck_02/horse_head_05","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_tail_06","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_L_1_09","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_L_1_09/arm_L_2_010","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_L_1_09/arm_L_2_010/arm_L_3_011","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/head_012","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/head_012/head_up_013","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_R_1_014","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_R_1_014/arm_R_2_015","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/chest_08/arm_R_1_014/arm_R_2_015/arm_R_3_016","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_L_1_017","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_L_1_017/leg_L_2_018","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_L_1_017/leg_L_2_018/leg_L_3_019","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_R_1_020","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_R_1_020/leg_R_2_021","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/body_07/leg_R_1_020/leg_R_2_021/leg_R_3_022","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_leg_R_front_023","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/horse_03/horse_leg_R_back_024","RootNode (gltf orientation matrix)/RootNode (model correction matrix)/c2475420cd6847fe9bd9c7a79c391504.fbx/(__autogen 0)/RootNode/(__autogen 0)/_rootJoint/bones_04/joint1_025"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,6.123234262925839e-17,1,-6.123234262925839e-17,0,0,6.123234262925839e-17,1,0,1,-6.123234262925839e-17,3.7493993930529855e-33,0,-16.73861312866211,-8.51220847552115e-15,-95.05490112304688,1],[7,-0.1379171460866928,0.9464163780212402,-0.29201871156692505,0,0.38765203952789307,0.3228955566883087,0.863402783870697,0,0.9114300608634949,0.005876398645341396,-0.4114130735397339,0,-70.37579345703125,-31.773096084594727,-14.951717376708984,1],[7,0.08341503143310547,0.9480016231536865,-0.30713987350463867,0,-0.39221346378326416,0.3145701289176941,0.8644155263900757,0,0.916084349155426,0.04835914447903633,0.3980588912963867,0,49.35762023925781,-28.742145538330078,-22.33606719970703,1],[7,2.878895581127916e-16,1,1.014140239300059e-16,0,0.3957972824573517,-2.0707824743109707e-16,0.918337881565094,0,0.918337881565094,-2.242404849012289e-16,-0.3957972824573517,0,-131.1417694091797,2.729323623389731e-14,-86.00308990478516,1],[7,2.878895581127916e-16,1,1.014140239300059e-16,0,0.3957972824573517,-2.0707824743109707e-16,0.918337881565094,0,0.918337881565094,-2.242404849012289e-16,-0.3957972824573517,0,-175.83526611328125,3.183656341484119e-14,-90.17678833007812,1],[7,6.123234262925839e-17,1,-6.123234262925839e-17,0,0,6.123234262925839e-17,1,0,1,-6.123234262925839e-17,3.7493993930529855e-33,0,75.07079315185547,4.656315870393444e-15,-121.1122817993164,1],[7,6.123234262925839e-17,1,-6.123234262925839e-17,0,0,6.123234262925839e-17,1,0,1,-6.123234262925839e-17,3.7493993930529855e-33,0,3.552713678800501e-15,-1.0886389310632225e-14,-177.78822326660156,1],[7,6.123234262925839e-17,1,-6.123234262925839e-17,0,0,6.123234262925839e-17,1,0,1,-6.123234262925839e-17,3.7493993930529855e-33,0,3.552713678800501e-15,-1.4875197902326602e-14,-242.93040466308594,1],[7,0.7013869881629944,0.3985631763935089,0.5909345746040344,0,-0.6710376739501953,0.08967430144548416,0.7359802722930908,0,0.24034298956394196,-0.9127463698387146,0.33034729957580566,0,113.90657806396484,-61.60163116455078,-239.85499572753906,1],[7,-0.14545908570289612,0.7934973239898682,0.5909345746040344,0,-0.3055751323699951,-0.6041166186332703,0.7359802722930908,0,0.9409917593002319,-0.07351989299058914,0.33034729957580566,0,76.91696166992188,33.50119400024414,-239.85499572753906,1],[7,-0.14545908570289612,0.7934973239898682,0.5909345746040344,0,-0.3055751323699951,-0.6041166186332703,0.7359802722930908,0,0.9409917593002319,-0.07351989299058914,0.33034729957580566,0,19.964641571044922,33.50119400024414,-239.85499572753906,1],[7,6.123234262925839e-17,1,-6.123234262925839e-17,0,0,6.123234262925839e-17,1,0,1,-6.123234262925839e-17,3.7493993930529855e-33,0,3.552713678800501e-15,-1.9425445342449547e-14,-317.2415771484375,1],[7,2.4101515185843264e-16,1,-3.243682231263801e-16,0,0.3313532769680023,2.2618244028170737e-16,0.9435067772865295,0,0.9435067772865295,-3.34879902001806e-16,-0.3313532769680023,0,-97.00580596923828,-1.0113496818437914e-13,-415.450439453125,1],[7,0.7013869881629944,0.3985631763935089,0.5909345746040344,0,0.6710376739501953,-0.08967430144548416,-0.7359802722930908,0,-0.24034298956394196,0.9127463698387146,-0.33034729957580566,0,-113.9063949584961,61.601627349853516,239.85484313964844,1],[7,-0.14545908570289612,0.7934973239898682,0.5909345746040344,0,0.3055751323699951,0.6041166186332703,-0.7359802722930908,0,-0.9409917593002319,0.07351989299058914,-0.33034729957580566,0,-76.9169692993164,-33.5009651184082,239.8550567626953,1],[7,-0.14545908570289612,0.7934973239898682,0.5909345746040344,0,0.3055751323699951,0.6041166186332703,-0.7359802722930908,0,-0.9409917593002319,0.07351989299058914,-0.33034729957580566,0,-19.96473503112793,-33.500911712646484,239.85536193847656,1],[7,0.08158351480960846,-0.024026596918702126,0.9963768720626831,0,-0.9966601133346558,-0.005546005442738533,0.0814729705452919,0,0.0035683929454535246,-0.9996959567070007,-0.024398814886808395,0,136.3737335205078,-1.5777112245559692,-63.49547576904297,1],[7,0.07834482192993164,-0.03309435397386551,0.9963768720626831,0,-0.9908995032310486,0.10714637488126755,0.0814729705452919,0,-0.10945446789264679,-0.9936923384666443,-0.024398814886808395,0,97.1568374633789,-11.693329811096191,-63.49547576904297,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,0.08158351480960846,-0.024026596918702126,0.9963768720626831,0,0.9966601133346558,0.005546005442738533,-0.0814729705452919,0,-0.0035683929454535246,0.9996959567070007,0.024398814886808395,0,-136.37405395507812,1.5777077674865723,63.49553298950195,1],[7,0.07834482192993164,-0.03309435397386551,0.9963768720626831,0,0.9908995032310486,-0.10714637488126755,-0.0814729705452919,0,0.10945446789264679,0.9936923384666443,0.024398814886808395,0,-97.15711212158203,11.693363189697266,63.4954948425293,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,-0.1379171460866928,0.9464163780212402,-0.29201871156692505,0,-0.38765203952789307,-0.3228955566883087,-0.863402783870697,0,-0.9114300608634949,-0.005876398645341396,0.4114130735397339,0,70.37580871582031,31.77313804626465,14.95173454284668,1],[7,0.08341503143310547,0.9480016231536865,-0.30713987350463867,0,0.39221346378326416,-0.3145701289176941,-0.8644155263900757,0,-0.916084349155426,-0.04835914447903633,-0.3980588912963867,0,-49.357601165771484,28.742116928100586,22.33609962463379,1],[7,0.06118108704686165,0.9942753314971924,-0.08759786933660507,0,0.8124908208847046,0.0013658804818987846,0.5829723477363586,0,0.5797547101974487,-0.10683935135602951,-0.8077560663223267,0,-223.05943298339844,108.160400390625,-43.059078216552734,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[80,"Material",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_TEXTURE":true}],[[[{"metallic":0,"roughness":1},"mainColor",8,[2,1,1,1,1],"emissiveScale",8,[2,0,0,0,1],"mainTexture",6,0]],11]]],0,0,[0,0],[19,11],[93,94]],[[[82],[84,"scene",[-3],[[100,-2,[6,"40XQBTUCxT8Jp1/o9Lgh0Y"],[3],4]],[4,"bf4CEPZVpZAbOIxEUDmEgQ",-1,0]],[90,"horse_03",[[[32,"horse_leg_L_front_00",-4,[4,"89K65njgFY9awyuOlfQqLQ",1,0],[1,41.43938064575195,15.998368263244629,-44.604835510253906]],[19,"horse_leg_L_back_01",-5,[4,"51cifcgZJaDqJsIPU5ASth",1,0],[1,-51.67333984375,16.2701358795166,-47.34711456298828],[3,0.015865642698594903,-0.3266330982361652,0.07187281603874887,0.9422809553594216],[1,4.442594522479947,-38.515898640479996,7.185623069382966]],-6,[19,"horse_tail_06",-7,[4,"2fDHo6fTFTqJ123ifF/jnB",1,0],[1,-91.80940246582031,-2.7755575615628914e-17,26.057376861572266],[3,1.5654792153463988e-20,0.08897828143704713,4.34009422003937e-19,0.996033566418577],[1,-2.638437877658969e-18,10.20966221116455,4.9696169185769776e-17]],-8,[19,"horse_leg_R_front_023",-9,[4,"bd2tBZT4ZdFYprYQ2/rJja",1,0],[1,41.439388275146484,-15.99839973449707,-44.604801177978516],[3,6.123234262925839e-17,1,6.123234262925839e-17,7.632783294297951e-17],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[19,"horse_leg_R_back_024",-10,[4,"cesM+WqOJRTLGIYfuRw9d9",1,0],[1,-51.67331314086914,-16.270099639892578,-47.347103118896484],[3,-0.08139052307694448,0.9405300693086047,0.02400670592480402,0.3289414074729004],[1,-5.718860094428666,141.05159252564198,-7.892036202210283]]],4,4,1,4,1,4,4],[4,"19DTeRvF9cWZLMWuFsqSNU",1,0],[1,-0.025526011362671852,-11.893184661865234,95.25074768066406],[3,-0.026019101373930622,-0.025195981737296962,-0.7048846323795313,0.7083966571795496],[1,-86.1105086404675,-86.04376852831953,-85.83946046718258]],[91,"(__autogen 0)",[[-11,-12,[52,"(__autogen 2)",-13,[4,"f7pyXGJ61WUrHVoLsl1d8D",1,0],[3,-0.7071067811865475,9.813077866773593e-18,-2.943923360032078e-17,0.7071067811865476],[1,-89.99999999999999,-1.590277340731758e-15,-3.1805546814635168e-15]],[52,"knight_full",-14,[4,"72vpionSFaC4FNyK/QVpvp",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],1,1,4,4],[4,"94Zu3Z2Dhd07Rkrv53ItkL",1,0]],[24,"body_07",2,[-15,-16,-17],[4,"22hEUyUrNaQbxYkOQaokwt",1,0],[1,-15.75064468383789,-0.01833431050181389,96.34754943847656],[3,0.04250494307951629,0.054575732777653437,0.006480860397670743,0.9975834890644968],[1,4.824851044675614,6.220410076523291,1.0067315128604857]],[24,"chest_08",4,[-18,-19,-20],[4,"94wRy7z31Q1KyjirxVX+Ka",1,0],[1,0,0,65.14217376708984],[3,0.018256440246420404,0.013510283634940957,0.0009675869097438374,0.9997415858116557],[1,2.090465286386153,1.5459322965623676,0.1391127489349052]],[92,"bones_04",[[2,[19,"joint1_025",-21,[4,"a6jMbAyTtV5K2hgCUynDH9",1,0],[1,-181.37918090820312,22.29253578186035,186.65782165527344],[3,-0.3627675500347932,0.1929809614295989,-0.5724924844849645,0.7095142059012591],[1,-74.53234389495867,-27.65898449146253,-72.25033125359843]]],1,4],[4,"ddFGB/CGpeKqVTRXCvIXBm",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[53,"RootNode (gltf orientation matrix)",1,[-22],[4,"01lzikVOFbIIrD5DWa2wVC",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-89.99999999999999,0,0]],[33,"RootNode (model correction matrix)",7,[-23],[4,"52w0XQXZ5YHZlDZVZWC4e3",1,0]],[53,"c2475420cd6847fe9bd9c7a79c391504.fbx",8,[-24],[4,"e20YJujGZQ656k3Cvv5tRC",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[33,"(__autogen 0)",9,[-25],[4,"27WR1g23NXDIp26k5Pgz7e",1,0]],[33,"RootNode",10,[3],[4,"dcCqzn9a5ew4r98WMRnsOf",1,0]],[33,"_rootJoint",3,[6],[4,"88/MI1kLhfL5I8oSqnAm2b",1,0]],[26,"horse_neck_02",2,[[32,"horse_head_05",-26,[4,"8duWFwWI9XnZOy3Wg0skg4",1,0],[1,44.69350051879883,-1.7763568394002505e-15,4.173702716827393]]],[4,"98O3regjFbYIwLjRdJI15W",1,0],[1,69.654052734375,5.551115123125783e-17,35.83054733276367],[3,0.023357117028427177,-0.2608059288594977,0.060976325107677594,0.9631804609377298],[1,4.42932901359328,-30.535913934987157,6.043244670499809]],[24,"arm_L_1_09",5,[-27],[4,"0bkpFBtoxWdqeeMMTZmRPZ",1,0],[1,-4.367867946624756,86.39816284179688,15.557828903198242],[3,-0.33418962905670274,0.2050369266406823,0.6241278154345374,0.6758266201812405],[1,-90.19727245456373,78.84964337113507,44.95587057619463]],[26,"arm_L_2_010",14,[[19,"arm_L_3_011",-28,[4,"c1jZSEPgJRBYBqj2T0RiOX",1,0],[1,56.95232009887695,0,0],[3,-0.1330936857982965,0.3145368960102268,0.03977533011031999,0.9390263760744376],[1,-15.96140520001345,36.9651444597963,-0.5171347452620403]]],[4,"1b7UQQTQVcqpo/Gf7+0QpE",1,0],[1,56.95232009887695,1.4210854715202004e-14,0],[3,-1.126032737388485e-16,1.0400406309918446e-16,-0.7422215774781351,0.6701545567448367],[1,180,-180,-84.15798937188097]],[26,"head_012",5,[[19,"head_up_013",-29,[4,"b1vvdU4CZSuaE4Zxrt8F3p",1,0],[1,-46.13523483276367,0,106.88189697265625],[3,-0.08677973396720637,-0.21211417685892503,-0.007686755712806901,0.9733538757998825],[1,-9.917899338503695,-24.47885228186628,1.2520443258154863]]],[4,"79ZwA6gM1VkZCRed/xKqOY",1,0],[1,0,3.552713678800501e-15,74.31118774414062],[3,-0.002974923029671843,-0.008767294780186334,0.008455553171843893,0.9999213909081868],[1,-0.3324290204955325,-1.0018916812700294,0.9718942407759841]],[24,"arm_R_1_014",5,[-30],[4,"adHKnYV3haPKVtOcnfofuL",1,0],[1,-4.367869853973389,-86.39820098876953,15.557594299316406],[3,0.9056615311970405,0.3279395892333824,0.23788447733445148,-0.1250751460786173],[1,-153.08549859192374,-37.36451015789243,32.309851011646025]],[26,"arm_R_2_015",17,[[19,"arm_R_3_016",-31,[4,"1ci3KYSmNdwKzg9RHlnG+z",1,0],[1,-56.95223617553711,-0.000054925076256040484,-0.00029895539046265185],[3,0.1996541432675665,0.4577637824603123,0.17951339145069345,0.8475644428794732],[1,11.498085033211503,53.74737492258538,29.149311256082296]]],[4,"28TVjfpPtVVqeyA69FYXh/",1,0],[1,-56.95234680175781,-0.0000875578261911869,-0.0002197673311457038],[3,8.791292716311379e-7,-3.482510568686163e-7,-0.7055299742918865,0.7086800797079],[1,0.009705619503069252,0.009606166508117759,-89.74475156796926]],[24,"leg_L_1_017",4,[-32],[4,"fc+bXSk0FYBoymKQlcK3qh",1,0],[1,-3.6130809783935547,52.10166931152344,-36.70555877685547],[3,-0.5720439534726961,0.28909969236167615,0.31099542874665276,0.7017613030585241],[1,-81.20193309601348,49.98330247493153,6.06943706721442]],[26,"leg_L_2_018",19,[[32,"leg_L_3_019",-33,[4,"e2xYuwpXhWUo/zrX2iug+y",1,0],[1,38.46443557739258,-5.684341886080802e-14,-2.842170943040401e-14]]],[4,"9bclhWx1BXias4QBnQkXXN",1,0],[1,38.5178108215332,-0.9413840770721436,-1.4210854715202004e-14],[3,1.6814806416850238e-17,-3.3951171019158044e-17,0.1805565920315142,0.9835645973061279],[1,2.778807202156887e-15,-4.465644237514454e-15,20.804362773962698]],[24,"leg_R_1_020",4,[-34],[4,"da6ZV7T3BdSq/fvUtgO98G",1,0],[1,-3.6130800247192383,-52.10169982910156,-36.705230712890625],[3,0.45602902900975334,0.5254243031328717,0.5672618763044465,-0.4406594944731324],[1,-93.41167612026486,-101.28886113277201,-1.1873219244724713]],[26,"leg_R_2_021",21,[[32,"leg_R_3_022",-35,[4,"7dXRzoxeJaIJRXiP6SqlaS",1,0],[1,-38.464744567871094,0.00003783630018006079,0.00001482806237618206]]],[4,"e0DFnc/4Vb5rdj5p7PBKFB",1,0],[1,-38.51786422729492,0.9413783550262451,0.000040950948459794745],[3,0.000001751946085938549,-0.000002129625691639891,0.5735651158556051,0.8191599708640199],[1,0.000890009499303724,-0.0009210844725647001,69.99841637616764]],[85,"(__autogen 1)",3,[[63,-36,[6,"dcup6zwiBYeIswlLnw6+Sl"],[0],[64],1,1,2]],[4,"79oTW+SoxagbAOT+SqHHzn",1,0]]],0,[0,12,1,0,0,1,0,-1,7,0,3,2,0,3,2,0,-3,13,0,3,2,0,-5,4,0,3,2,0,3,2,0,-1,12,0,-2,23,0,3,3,0,3,3,0,-1,5,0,-2,19,0,-3,21,0,-1,14,0,-2,16,0,-3,17,0,3,6,0,-1,8,0,-1,9,0,-1,10,0,-1,11,0,3,13,0,-1,15,0,3,15,0,3,16,0,-1,18,0,3,18,0,-1,20,0,3,20,0,-1,22,0,3,22,0,0,23,0,13,1,2,3,6,3,3,11,6,3,12,36],[0,0,0,0,0],[-1,14,15,-1,10],[95,19,20,10,10]],[[[103,".bin",2929652565,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":104760,"length":24696,"count":6174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":104760,"count":1455,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26]]},"minPosition",8,[1,-162.89157104492188,-4.556846618652344,-194.87783813476562],"maxPosition",8,[1,162.8917236328125,612.1434936523438,416.308837890625]]],-1],0,0,[],[],[]],[[{"name":"bg_panel_wood","rect":{"x":0,"y":0,"width":570,"height":462},"offset":{"x":0,"y":0},"originalSize":{"width":570,"height":462},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[96]],[[{"name":"item1","rect":{"x":0,"y":0,"width":167,"height":119},"offset":{"x":0,"y":0},"originalSize":{"width":167,"height":119},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[97]],[[{"name":"ic_sundine","rect":{"x":13,"y":35,"width":121,"height":90},"offset":{"x":-1.5,"y":-5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[98]],[[{"name":"background","rect":{"x":0,"y":0,"width":640,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":640,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[99]],[[[81,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_ALBEDO_MAP":true,"METALLIC_CHANNEL":"b","OCCLUSION_CHANNEL":"g","ROUGHNESS_CHANNEL":"r"}],[[[{"occlusion":1,"roughness":1,"metallic":0.6},"albedo",8,[4,4294440954],"pbrScale",8,[2,1,1,0,1],"albedoMap",6,0]],11]]],0,0,[0,0],[20,11],[100,101]],[[{"name":"rare3","rect":{"x":0,"y":0,"width":100,"height":126},"offset":{"x":0,"y":1},"originalSize":{"width":100,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[102]],[[{"name":"btn_sm_red","rect":{"x":0,"y":0,"width":130,"height":61},"offset":{"x":0,"y":0},"originalSize":{"width":130,"height":61},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[103]],[[{"name":"text_kuochong","rect":{"x":0,"y":0,"width":143,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":143,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[104]],[[{"name":"timer_slot","rect":{"x":0,"y":0,"width":225,"height":13},"offset":{"x":0,"y":0},"originalSize":{"width":225,"height":13},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[105]],[[{"name":"shop_chain","rect":{"x":0,"y":0,"width":33,"height":398},"offset":{"x":0,"y":0},"originalSize":{"width":33,"height":398},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[106]],[[{"name":"text_title_chongzhi","rect":{"x":0,"y":0,"width":127,"height":59},"offset":{"x":0,"y":0},"originalSize":{"width":127,"height":59},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[107]],[[{"name":"singleColor","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[108]],[[{"name":"txt_hecheng","rect":{"x":0,"y":0,"width":58,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":58,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[109]],[[{"name":"btn_close","rect":{"x":0,"y":0,"width":82,"height":82},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":82},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[110]],[[{"name":"ic_mermaidqueen","rect":{"x":24,"y":19,"width":96,"height":109},"offset":{"x":-3,"y":1.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[111]],[[{"name":"banner_subscribe","rect":{"x":0,"y":0,"width":540,"height":122},"offset":{"x":0,"y":0},"originalSize":{"width":540,"height":122},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[112]],[[{"name":"d_highlight","rect":{"x":5,"y":6,"width":57,"height":50},"offset":{"x":0.5,"y":-2},"originalSize":{"width":66,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[113]],[[{"name":"btn_raid","rect":{"x":6,"y":6,"width":73,"height":104},"offset":{"x":1,"y":-3},"originalSize":{"width":83,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[114]],[[[104,"builtin-unlit",[{"hash":3319190198,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 13) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[{"name":"icon_rank","rect":{"x":0,"y":0,"width":68,"height":57},"offset":{"x":0,"y":0},"originalSize":{"width":68,"height":57},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[115]],[[{"name":"bg_main_btns","rect":{"x":0,"y":0,"width":636,"height":166},"offset":{"x":0,"y":0},"originalSize":{"width":636,"height":166},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[116]],[[{"name":"txt_beibao","rect":{"x":0,"y":0,"width":56,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[117]],[[{"name":"icon_ticket","rect":{"x":0,"y":0,"width":63,"height":53},"offset":{"x":0,"y":0},"originalSize":{"width":63,"height":53},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[118]],[[{"name":"bg_timer","rect":{"x":0,"y":0,"width":278,"height":53},"offset":{"x":0,"y":0},"originalSize":{"width":278,"height":53},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[119]],[[{"name":"ic_sthoth","rect":{"x":15,"y":8,"width":111,"height":110},"offset":{"x":-4.5,"y":12},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[120]],[[{"name":"c_highlight","rect":{"x":5,"y":6,"width":57,"height":50},"offset":{"x":0.5,"y":-2},"originalSize":{"width":66,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[121]],[[{"name":"star_small","rect":{"x":0,"y":0,"width":19,"height":19},"offset":{"x":0,"y":0},"originalSize":{"width":19,"height":19},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[122]],[[{"name":"txt_chuzhan","rect":{"x":0,"y":0,"width":57,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":57,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[123]],[[{"name":"ic_pharaoh","rect":{"x":30,"y":32,"width":96,"height":92},"offset":{"x":3,"y":-3},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[124]],[[{"name":"icon_fight","rect":{"x":0,"y":0,"width":61,"height":59},"offset":{"x":0,"y":0},"originalSize":{"width":61,"height":59},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[125]],[[{"name":"btn_fold","rect":{"x":0,"y":0,"width":98,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":98,"height":30},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[126]],[[{"name":"text_sell","rect":{"x":0,"y":0,"width":75,"height":49},"offset":{"x":0,"y":0},"originalSize":{"width":75,"height":49},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[127]],[[{"name":"btn_chuzhan","rect":{"x":0,"y":0,"width":79,"height":65},"offset":{"x":0,"y":0},"originalSize":{"width":79,"height":65},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[128]],[[[105,"home"],[60,"backPack",false,524288,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14],[[[0,-1,[5,604,626]],-2],4,1]],[60,"chargePanel",false,524288,[-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[29,"chargePanel<UITransform>",-15,[5,604,626]],-16],4,1]],[97,"Home",524288,[-34,-35,-36,-37,-38,-39],[[[0,-26,[5,640,960]],[16,45,100,100,1,-27],[113,-32,-31,-30,-29,-28],-33],4,4,4,1]],[86,"Canvas",524288,"96nnwUrs9Fy77NiL7AcUBt",[-44,-45,-46,3,1,2,-47,-48],[[0,-40,[5,640,960]],[114,-42,-41],[108,45,-43]],[1,320,480,0]],[42,"shop_menu",524288,[-52,-53,-54,-55,-56,-57,-58],[[0,-49,[5,299,105]],[5,0,-50,77],[37,1,-590.5,1,-51]],[1,155,1018,0]],[98,"chanllenge",false,524288,4,[-61,-62,-63,-64,-65,-66,-67],[[[0,-59,[5,604,626]],-60],4,1]],[54,"layout",524288,[-71,-72,-73,-74,-75,-76],[[0,-68,[5,564.58,89.86]],[66,45,30.21,30.21,19.57,19.57,100,100,1,-69],[118,1,30,30,true,-70]]],[54,"layout",524288,[-81,-82,-83,-84,-85,-86],[[0,-77,[5,636,166]],[16,45,100,100,1,-78],[119,1,30,30,20,true,-79],[40,-80]]],[43,"Shop",524288,3,[-91,-92,-93,5,-94],[[[0,-87,[5,640,960]],[16,45,100,100,1,-88],-89,-90],4,4,1,1]],[42,"pvp_timer",524288,[-102,-103,-104,-105,-106],[[0,-95,[5,278,53]],[3,-96,91],[67,9,30,72,1,-97],[70,15,120,55,-101,-100,-99,-98]],[1,-151,-98.5,0]],[42,"pve_timer",524288,[-114,-115,-116,-117,-118],[[0,-107,[5,278,53]],[3,-108,94],[109,33,15,72,1,-109],[70,120,80,12,-113,-112,-111,-110]],[1,166,-98.5,0]],[99,"sub_btns",524288,[-127,7],[[[29,"sub_btns<UITransform>",-119,[5,625,129]],[110,"sub_btns<Widget>",4,44.5,1,-120],[45,"sub_btns<Sprite>",0,-121,151],[122,-125,-124,-123,-122,7],-126],4,4,4,4,1],[1,0,109,0]],[1,"upper",524288,3,[-130,-131,-132,10,11,-133],[[0,-128,[5,640,0]],[38,41,100,1,-129]],[1,0,480,0]],[1,"btn_sell",524288,1,[-140],[[0,-134,[5,154,59]],[11,1,0,-135,127],[10,-137,[4,4292269782],-136,128],[12,4,20,1,-138],[9,-139]],[1,-181,-263.5,0]],[1,"btn_upgrade",524288,1,[-147],[[0,-141,[5,154,59]],[11,1,0,-142,130],[10,-144,[4,4292269782],-143,131],[12,4,20,1,-145],[9,-146]],[1,0,-263.5,0]],[1,"btn_upgrade",524288,1,[-154],[[0,-148,[5,154,59]],[11,1,0,-149,133],[10,-151,[4,4292269782],-150,134],[12,4,20,1,-152],[9,-153]],[1,179,-263.5,0]],[93,"horse_03",524288,[[[34,"horse_leg_L_front_00",524288,-155,[1,41.43938064575195,15.998368263244629,-44.604835510253906]],[20,"horse_leg_L_back_01",524288,-156,[1,-51.67333984375,16.2701358795166,-47.34711456298828],[3,0.015865642577409744,-0.326633095741272,0.07187281548976898,0.9422809481620789],[1,4.442594528198242,-38.515899658203125,7.1856231689453125]],-157,[20,"horse_tail_06",524288,-158,[1,-91.80940246582031,-2.7755575615628914e-17,26.057376861572266],[3,1.565479214258812e-20,0.08897828310728073,4.340094147937502e-19,0.9960335493087769],[1,-2.638437940730538e-18,10.209662437438965,4.969617078668355e-17]],-159,[20,"horse_leg_R_front_023",524288,-160,[1,41.439388275146484,-15.99839973449707,-44.604801177978516],[3,6.123234262925839e-17,1,6.123234262925839e-17,7.632783294297951e-17],[1,-7.01670955022206e-15,180,7.01670955022206e-15]],[20,"horse_leg_R_back_024",524288,-161,[1,-51.67331314086914,-16.270099639892578,-47.347103118896484],[3,-0.08139052242040634,0.9405300617218018,0.024006705731153488,0.3289414048194885],[1,-5.718860149383545,141.0515899658203,-7.892036437988281]]],4,4,1,4,1,4,4],[1,-0.025526011362671852,-11.893184661865234,95.25074768066406],[3,-0.026019101962447166,-0.025195982307195663,-0.7048846483230591,0.7083966732025146],[1,-86.11051177978516,-86.04376983642578,-85.83946228027344]],[1,"btnCharge",524288,5,[-167],[[0,-162,[5,200,60]],[3,-163,11],[30,-165,[[18,"731777n3LdF7rEriG3jUd4K","show",2]],[4,4292269782],-164,64],[9,-166]],[1,5,-78,0]],[1,"btn_sm_red",524288,2,[-173],[[0,-168,[5,117,49]],[11,1,0,-169,23],[10,-171,[4,4292269782],-170,24],[9,-172]],[1,-197,237,0]],[1,"btn_sm_blue",524288,2,[-179],[[0,-174,[5,117,49]],[11,1,0,-175,26],[10,-177,[4,4292269782],-176,27],[9,-178]],[1,-63,237,0]],[1,"header",524288,2,[-183,-184,-185],[[0,-180,[5,548,62]],[17,1,-181,33],[111,1,91.5,20,1,-182]],[1,0,190.5,0]],[1,"btn_charge",524288,21,[-191],[[0,-186,[5,150,54]],[11,1,0,-187,30],[10,-189,[4,4292269782],-188,31],[9,-190]],[1,-92,0,0]],[1,"content",524288,2,[-195,-196,-197],[[8,-192,[5,524,412],[0,0.5,1]],[120,2,true,-193],[112,41,40,40,152,524,1,-194]],[1,0,161,0]],[1,"item1",524288,23,[-200,-201,-202,-203],[[0,-198,[5,535,146]],[5,0,-199,43]],[1,0,-73,0]],[1,"btnBuy",524288,24,[-209],[[0,-204,[5,154,60]],[17,1,-205,38],[31,-207,[4,4292269782],-206,39,40,41,42],[9,-208]],[1,170,-33,0]],[1,"item2",524288,23,[-212,-213,-214,-215],[[0,-210,[5,535,146]],[5,0,-211,53]],[1,0,-219,0]],[1,"btnBuy",524288,26,[-221],[[0,-216,[5,154,60]],[17,1,-217,48],[31,-219,[4,4292269782],-218,49,50,51,52],[9,-220]],[1,170,-33,0]],[1,"item3",524288,23,[-224,-225,-226,-227],[[0,-222,[5,535,146]],[5,0,-223,63]],[1,0,-365,0]],[1,"btnBuy",524288,28,[-233],[[0,-228,[5,154,60]],[17,1,-229,58],[31,-231,[4,4292269782],-230,59,60,61,62],[9,-232]],[1,170,-33,0]],[1,"btnUnlock",524288,5,[-239],[[0,-234,[5,200,60]],[3,-235,66],[10,-237,[4,4292269782],-236,67],[9,-238]],[1,5,-153,0]],[1,"btnExpand",524288,5,[-245],[[0,-240,[5,200,60]],[3,-241,69],[10,-243,[4,4292269782],-242,70],[9,-244]],[1,5,-229,0]],[1,"btnStamima",524288,5,[-251],[[0,-246,[5,200,60]],[3,-247,72],[10,-249,[4,4292269782],-248,73],[9,-250]],[1,5,-309,0]],[1,"btnEnergy",524288,5,[-257],[[0,-252,[5,200,60]],[5,0,-253,75],[10,-255,[4,4292269782],-254,76],[9,-256]],[1,5,-387,0]],[2,"btn_message",524288,13,[[0,-258,[5,75,67]],[3,-259,95],[67,9,10.5,133,1,-260],[10,-262,[4,4292269782],-261,96],[9,-263]],[1,-272,-166.5,0]],[1,"btn_backpack",524288,7,[-269],[[0,-264,[5,83,66]],[17,1,-265,101],[30,-267,[[18,"88c12+9VW9MSa0k23tDsf+r","show",1]],[4,4292269782],-266,135],[12,4,11.930000000000001,1,-268]],[1,-210.79000000000002,0,0]],[1,"btnLeft",524288,1,[-275],[[0,-270,[5,117,49]],[11,1,0,-271,109],[31,-273,[4,4292269782],-272,110,111,112,113],[9,-274]],[1,-215,259,0]],[1,"btnRight",524288,1,[-281],[[0,-276,[5,117,49]],[11,1,0,-277,115],[31,-279,[4,4292269782],-278,116,117,118,119],[9,-280]],[1,209,259,0]],[1,"btn_honor",524288,7,[-287],[[0,-282,[5,83,66]],[11,1,0,-283,137],[10,-285,[4,4292269782],-284,138],[12,4,11.930000000000001,1,-286]],[1,-127.79000000000002,0,0]],[1,"btn_inbox",524288,7,[-293],[[0,-288,[5,83,66]],[11,1,0,-289,140],[10,-291,[4,4292269782],-290,141],[12,4,11.930000000000001,1,-292]],[1,-44.79000000000002,0,0]],[1,"btn_quest",524288,7,[-299],[[0,-294,[5,83,66]],[11,1,0,-295,143],[10,-297,[4,4292269782],-296,144],[12,4,11.930000000000001,1,-298]],[1,38.20999999999998,0,0]],[1,"btn_war",524288,7,[-305],[[0,-300,[5,83,66]],[11,1,0,-301,146],[10,-303,[4,4292269782],-302,147],[12,4,11.930000000000001,1,-304]],[1,121.20999999999998,0,0]],[1,"btn_craft",524288,7,[-311],[[0,-306,[5,83,66]],[11,1,0,-307,149],[10,-309,[4,4292269782],-308,150],[12,4,11.930000000000001,1,-310]],[1,204.20999999999998,0,0]],[2,"btn_home",524288,8,[[0,-312,[5,76,106]],[3,-313,154],[12,4,30,1,-314],[30,-316,[[18,"edc2a7itdpDQ5BDY+sVWkwJ","gotoHome",3]],[4,4292269782],-315,155],[41,-317,[1,1.2000000476837158,1.2000000476837158,1]]],[1,-250,0,0]],[2,"btn_level",524288,8,[[0,-318,[5,76,106]],[5,0,-319,156],[12,4,30,1,-320],[10,-322,[4,4292269782],-321,157],[41,-323,[1,1.2000000476837158,1.2000000476837158,1]]],[1,-154,0,0]],[2,"btn_raid",524288,8,[[0,-324,[5,76,106]],[5,0,-325,158],[12,4,30,1,-326],[30,-328,[[18,"6cf851wT2xK+7apBEpV2PF2","show",6]],[4,4292269782],-327,176],[41,-329,[1,1.2000000476837158,1.2000000476837158,1]]],[1,-58,0,0]],[2,"btn_shop",524288,8,[[0,-330,[5,76,106]],[5,0,-331,177],[12,4,30,1,-332],[30,-334,[[18,"edc2a7itdpDQ5BDY+sVWkwJ","gotoShop",3]],[4,4292269782],-333,178],[41,-335,[1,1.2000000476837158,1.2000000476837158,1]]],[1,38,0,0]],[2,"btn_friends",524288,8,[[0,-336,[5,76,106]],[5,0,-337,179],[12,4,30,1,-338],[10,-340,[4,4292269782],-339,180],[9,-341]],[1,134,0,0]],[2,"btn_setting",524288,8,[[0,-342,[5,76,106]],[5,0,-343,181],[12,4,30,1,-344],[10,-346,[4,4292269782],-345,182],[9,-347]],[1,230,0,0]],[2,"btn_close",524288,2,[[0,-348,[5,82,82]],[17,1,-349,17],[46,-351,[[18,"731777n3LdF7rEriG3jUd4K","hide",2]],[4,4292269782],-350,18,19,20,21],[9,-352]],[1,279,291,0]],[1,"status_rank",524288,13,[-356,-357],[[0,-353,[5,188,54]],[3,-354,84],[37,1,10,1,-355]],[1,-193,-37,0]],[1,"status_diamond",524288,13,[-361,-362],[[0,-358,[5,188,54]],[3,-359,86],[37,1,10,1,-360]],[1,17,-37,0]],[1,"status_gold",524288,13,[-366,-367],[[0,-363,[5,188,54]],[3,-364,88],[37,1,10,1,-365]],[1,225,-37,0]],[61,"scrollBar",false,524288,[-372],[[[8,-368,[5,12,443],[0,1,0.5]],[11,1,0,-369,125],[68,37,250,1,-370],-371],4,4,4,1],[1,249.5,0,1]],[61,"scrollBar",false,524288,[-377],[[[8,-373,[5,12,443],[0,1,0.5]],[11,1,0,-374,169],[68,37,250,1,-375],-376],4,4,4,1],[1,249.5,0,1]],[87,"scene",524288,[-380],[[101,true,-378,[6,"62XjxjjUdJ8qwgzeE3ieaE"],[173],174],[123,-379,175]],[1,0,-161.34100341796875,302.69500732421875],[1,0.699999988079071,0.699999988079071,0.699999988079071]],[35,"background",524288,4,[-384],[[0,-381,[5,640,960]],[3,-382,1],[16,45,100,100,1,-383]]],[35,"background",524288,3,[-388],[[0,-385,[5,640,960]],[5,0,-386,4],[16,45,640,960,1,-387]]],[1,"bot_frame",524288,9,[-392],[[0,-389,[5,622,217]],[3,-390,79],[12,4,-207,1,-391]],[1,0,-578.5,0]],[62,"timer",524288,10,[-396],[[[0,-393,[5,225,13]],[17,1,-394,90],-395],4,4,1],[1,10.5,-9.899999618530273,0]],[62,"timer",524288,11,[-400],[[[0,-397,[5,225,13]],[17,1,-398,93],-399],4,4,1],[1,10.5,-9.899999618530273,0]],[1,"lower",524288,3,[12,-403],[[0,-401,[5,640,0]],[38,44,100,1,-402]],[1,0,-480,0]],[1,"btn_expand_slot",524288,12,[-406,-407],[[29,"btn_expand_slot<UITransform>",-404,[5,131,35]],[115,"btn_expand_slot<Sprite>",-405,99]],[1,0,58,0]],[14,"btn_expand",524288,62,[[[65,"btn_expand<UITransform>",-408,[5,98,30],[0,0.5,0]],[45,"btn_expand<Sprite>",0,-409,97],-410],4,4,1],[1,0,-7.300000190734863,0]],[14,"btn_fold",524288,62,[[[65,"btn_expand<UITransform>",-411,[5,98,30],[0,0.5,1]],[45,"btn_expand<Sprite>",0,-412,98],-413],4,4,1],[1,0,11,0]],[2,"btn_close",524288,1,[[0,-414,[5,82,82]],[17,1,-415,120],[46,-417,[[18,"88c12+9VW9MSa0k23tDsf+r","hide",1]],[4,4292269782],-416,121,122,123,124]],[1,279,291,0]],[43,"scrollView",524288,1,[53,-420],[[[29,"scrollView<UITransform>",-418,[5,499,443]],-419],4,1]],[35,"view",524288,66,[-424],[[0,-421,[5,499,443]],[72,-422],[16,45,240,250,1,-423]]],[1,"main_btns",524288,61,[8],[[0,-425,[5,636,166]],[3,-426,183],[23,4,1,-427]],[1,0,83,0]],[2,"btn_close",524288,6,[[0,-428,[5,82,82]],[17,1,-429,164],[46,-431,[[18,"6cf851wT2xK+7apBEpV2PF2","hide",6]],[4,4292269782],-430,165,166,167,168]],[1,279,291,0]],[43,"scrollView",524288,6,[54,-434],[[[29,"scrollView<UITransform>",-432,[5,499,443]],-433],4,1]],[35,"view",524288,70,[-438],[[0,-435,[5,499,443]],[72,-436],[16,45,240,250,1,-437]]],[1,"role",524288,6,[55],[[0,-439,[5,494,438]],[66,45,55,55,88,100,485.246,431.5,1,-440]],[1,0,6,-1]],[94,"(__autogen 0)",524288,[[-441,-442,[55,"(__autogen 2)",524288,-443,[3,-0.7071067690849304,9.81307769882992e-18,-2.9439232269309147e-17,0.7071067690849304],[1,-90,-1.5902773592947552e-15,-3.1805547185895103e-15]],[55,"knight_full",524288,-444,[3,-0.7071067690849304,0,0,0.7071067690849304],[1,-90,0,0]]],1,1,4,4]],[2,"bg_gradient_mask",524288,56,[[0,-445,[5,640,284]],[5,0,-446,0],[38,41,100,1,-447]],[1,0,338,0]],[7,"mask",524288,4,[[0,-448,[5,640,960]],[28,0,-449,[4,4278190080],2],[16,45,100,100,1,-450]]],[2,"bg_gradient_mask",524288,57,[[0,-451,[5,640,288]],[5,0,-452,3],[38,41,640,1,-453]],[1,0,336,0]],[7,"mask",524288,3,[[0,-454,[5,640,960]],[28,0,-455,[4,197379],5],[16,45,100,100,1,-456]]],[7,"bg_shop",524288,9,[[0,-457,[5,640,960]],[3,-458,6],[16,45,640,960,1,-459]]],[14,"shop_figure",524288,9,[[[8,-460,[5,415,446],[0,0.5,0.10000000149011612]],-461,[12,4,322,1,-462]],4,1,4],[1,-609,-113.39999933540821,0]],[7,"mask",524288,2,[[0,-463,[5,720,1400]],[28,0,-464,[4,2147483648],12],[40,-465]]],[1,"title_bg",524288,2,[-468],[[0,-466,[5,270,94]],[3,-467,16]],[1,0,303,0]],[1,"icon_ticket",524288,21,[-471],[[0,-469,[5,63,53]],[3,-470,32]],[1,89,0,0]],[1,"item_icon",524288,24,[-474],[[0,-472,[5,167,119]],[3,-473,35]],[1,-160,8,0]],[1,"banner_green",524288,83,[-477],[[0,-475,[5,178,34]],[3,-476,34]],[1,-3,41,0]],[2,"discount",524288,84,[[0,-478,[5,178,26]],[47,"优惠60%",20,30,2,-479],[44,45,2,6,120.04,40,1,-480]],[1,0,2,0]],[1,"titlebg",524288,24,[-483],[[0,-481,[5,181,33]],[3,-482,37]],[1,21,46,0]],[7,"num",524288,25,[[0,-484,[5,100,40]],[48,1,"$68",20,20,1,false,-485,[4,4289461503]],[50,-486]]],[1,"item_icon",524288,26,[-489],[[0,-487,[5,167,119]],[3,-488,45]],[1,-160,8,0]],[1,"banner_green",524288,88,[-492],[[0,-490,[5,178,34]],[3,-491,44]],[1,-3,41,0]],[2,"discount",524288,89,[[0,-493,[5,178,26]],[47,"优惠60%",20,30,2,-494],[44,45,2,6,120.04,40,1,-495]],[1,0,2,0]],[1,"titlebg",524288,26,[-498],[[0,-496,[5,181,33]],[3,-497,47]],[1,21,46,0]],[7,"num",524288,27,[[0,-499,[5,100,40]],[48,1,"$68",20,20,1,false,-500,[4,4289461503]],[50,-501]]],[1,"item_icon",524288,28,[-504],[[0,-502,[5,167,119]],[3,-503,55]],[1,-160,8,0]],[1,"banner_green",524288,93,[-507],[[0,-505,[5,178,34]],[3,-506,54]],[1,-3,41,0]],[2,"discount",524288,94,[[0,-508,[5,178,26]],[47,"优惠60%",20,30,2,-509],[44,45,2,6,120.04,40,1,-510]],[1,0,2,0]],[1,"titlebg",524288,28,[-513],[[0,-511,[5,181,33]],[3,-512,57]],[1,21,46,0]],[7,"num",524288,29,[[0,-514,[5,100,40]],[48,1,"$68",20,20,1,false,-515,[4,4289461503]],[50,-516]]],[1,"icon_rank",524288,50,[-519],[[0,-517,[5,68,57]],[3,-518,83]],[1,-87.30000305175781,3.5,0]],[2,"title",524288,35,[[0,-520,[5,54,33]],[5,0,-521,100],[23,4,1,-522]],[1,0,-16.5,0]],[7,"mask",524288,1,[[0,-523,[5,720,1400]],[28,0,-524,[4,2147483648],102],[40,-525]]],[1,"title_bg",524288,1,[-528],[[0,-526,[5,270,94]],[3,-527,107]],[1,0,303,0]],[2,"content",524288,67,[[8,-529,[5,499,124],[0,0.5,1]],[69,1,3,6,6,true,-530]],[1,0,217,0]],[2,"title",524288,38,[[0,-531,[5,54,33]],[5,0,-532,136],[23,4,1,-533]],[1,0,-16.5,0]],[2,"title",524288,39,[[0,-534,[5,54,33]],[5,0,-535,139],[23,4,1,-536]],[1,0,-16.5,0]],[2,"title",524288,40,[[0,-537,[5,54,33]],[5,0,-538,142],[23,4,1,-539]],[1,0,-16.5,0]],[2,"title",524288,41,[[0,-540,[5,54,33]],[5,0,-541,145],[23,4,1,-542]],[1,0,-16.5,0]],[2,"title",524288,42,[[0,-543,[5,54,33]],[5,0,-544,148],[23,4,1,-545]],[1,0,-16.5,0]],[7,"mask",524288,6,[[0,-546,[5,720,1400]],[28,0,-547,[4,2147483648],159],[40,-548]]],[1,"title_bg",524288,6,[-551],[[0,-549,[5,270,94]],[3,-550,163]],[1,0,303,0]],[2,"content",524288,71,[[8,-552,[5,499,124],[0,0.5,1]],[69,1,3,6,6,true,-553]],[1,0,217,0]],[25,"body_07",524288,17,[-554,-555,-556],[1,-15.75064468383789,-0.01833431050181389,96.34754943847656],[3,0.042504943907260895,0.054575733840465546,0.006480860523879528,0.9975835084915161],[1,4.824851036071777,6.220409870147705,1.0067315101623535]],[25,"chest_08",524288,111,[-557,-558,-559],[1,0,0,65.14217376708984],[3,0.01825644075870514,0.013510284014046192,0.0009675869368948042,0.9997416138648987],[1,2.0904653072357178,1.5459322929382324,0.13911275565624237]],[7,"(__autogen 1)",524288,73,[[63,-560,[6,"d73Z5dd5dCJIo+p2j1/kcO"],[170],[64],55,171,172],[128,-561,[6,"34vl9R3vNLTbPt5EU621P7"]],[106,-562]]],[7,"loading",524288,4,[[0,-563,[5,175.7,50.4]],[73,"Loading...",40,-564]]],[7,"loading",524288,3,[[0,-565,[5,175.7,50.4]],[73,"Loading...",40,-566]]],[7,"mask",524288,9,[[0,-567,[5,720,1300]],[28,0,-568,[4,0],7]]],[2,"shop_chain_left",524288,5,[[0,-569,[5,33,398]],[3,-570,8]],[1,-74,-186,0]],[2,"shop_chain_right",524288,5,[[0,-571,[5,33,398]],[3,-572,9]],[1,83,-186,0]],[2,"text_chongzhi",524288,18,[[0,-573,[5,118,49]],[5,0,-574,10]],[1,0,1,0]],[7,"bg_panel",524288,2,[[0,-575,[5,564,599]],[11,1,0,-576,13]]],[7,"bg_frame",524288,2,[[0,-577,[5,604,626]],[5,0,-578,14]]],[2,"title_backpack",524288,81,[[0,-579,[5,123,56]],[5,0,-580,15]],[1,0,6,0]],[56,"text_sm_chongzhi",524288,19,[[0,-581,[5,67,28]],[3,-582,22]],[1,0,5,0],[1,0.800000011920929,0.800000011920929,1]],[56,"text_sm_duihuan",524288,20,[[0,-583,[5,67,28]],[3,-584,25]],[1,0,5,0],[1,0.800000011920929,0.800000011920929,1]],[2,"title_vip",524288,21,[[0,-585,[5,51,26]],[3,-586,28]],[1,-224,0,0]],[7,"text_be_vip",524288,22,[[0,-587,[5,117,39]],[3,-588,29]]],[2,"New Label",524288,82,[[8,-589,[5,69.52,50.4],[0,0,0.5]],[124,"12000",25,25,-590,[4,4286052598]]],[1,32,0,0]],[2,"text_subscribe",524288,86,[[8,-591,[5,115,29],[0,0,0.5]],[3,-592,36]],[1,-80,0,0]],[2,"desc",524288,24,[[8,-593,[5,231.12,31.5],[0,0,1]],[49,"包含一张月卡，3颗钻石。",0,0,20,20,25,-594,[4,4278848094]]],[1,-66,26,0]],[2,"text_subscribe",524288,91,[[8,-595,[5,115,29],[0,0,0.5]],[3,-596,46]],[1,-80,0,0]],[2,"desc",524288,26,[[8,-597,[5,231.12,31.5],[0,0,1]],[49,"包含一张月卡，3颗钻石。",0,0,20,20,25,-598,[4,4278848094]]],[1,-66,26,0]],[2,"text_subscribe",524288,96,[[8,-599,[5,115,29],[0,0,0.5]],[3,-600,56]],[1,-80,0,0]],[2,"desc",524288,28,[[8,-601,[5,231.12,31.5],[0,0,1]],[49,"包含一张月卡，3颗钻石。",0,0,20,20,25,-602,[4,4278848094]]],[1,-66,26,0]],[2,"text",524288,30,[[0,-603,[5,118,49]],[5,0,-604,65]],[1,0,1,0]],[2,"text",524288,31,[[0,-605,[5,141,49]],[5,0,-606,68]],[1,0,1,0]],[2,"text",524288,32,[[0,-607,[5,141,49]],[5,0,-608,71]],[1,0,1,0]],[2,"text",524288,33,[[0,-609,[5,141,49]],[5,0,-610,74]],[1,0,1,0]],[7,"banner_subscribe",524288,58,[[0,-611,[5,540,122]],[3,-612,78]]],[7,"rank",524288,98,[[0,-613,[5,22.25,50.4]],[125,"99",20,20,-614]]],[7,"userName",524288,50,[[0,-615,[5,128,20]],[126,"卢克断手者",20,20,20,2,-616]]],[2,"icon_rank",524288,51,[[0,-617,[5,57,53]],[3,-618,85]],[1,-83.5999984741211,0,0]],[7,"num",524288,51,[[0,-619,[5,128,50]],[74,"6688999",26,25,25,2,-620,[4,4286052598]]]],[2,"icon_rank",524288,52,[[0,-621,[5,59,59]],[3,-622,87]],[1,-79.69999694824219,-0.4000000059604645,0]],[7,"num",524288,52,[[0,-623,[5,128,50]],[74,"999999",26,25,25,2,-624,[4,4286052598]]]],[2,"icon_fight",524288,10,[[0,-625,[5,61,59]],[3,-626,89]],[1,-131.3000030517578,0,0]],[2,"title_time",524288,10,[[0,-627,[5,80,25.2]],[75,"剩余时间",20,20,20,-628,[4,4286052598]]],[1,-61.79999923706055,11.399999618530273,0]],[14,"num_time",524288,10,[[[8,-629,[5,38.93,50.4],[0,0,0.5]],-630],4,1],[1,-19,11,0]],[14,"num_energy",524288,10,[[[8,-631,[5,72.29,25.2],[0,1,0.5]],-632],4,1],[1,119,11.399999618530273,0]],[14,"bar",524288,59,[[[8,-633,[5,110,10],[0,0,0.5]],-634],4,1],[1,-110.30000305175781,0.4000000059604645,0]],[2,"icon_fight",524288,11,[[0,-635,[5,55,63]],[3,-636,92]],[1,-131.3000030517578,0,0]],[2,"title_time",524288,11,[[0,-637,[5,80,25.2]],[75,"剩余时间",20,20,20,-638,[4,4286052598]]],[1,-61.79999923706055,11.399999618530273,0]],[14,"num_time",524288,11,[[[8,-639,[5,38.93,50.4],[0,0,0.5]],-640],4,1],[1,-19,11,0]],[14,"num_energy",524288,11,[[[8,-641,[5,72.29,25.2],[0,1,0.5]],-642],4,1],[1,119,11.399999618530273,0]],[14,"bar",524288,60,[[[8,-643,[5,110,10],[0,0,0.5]],-644],4,1],[1,-110.30000305175781,0.4000000059604645,0]],[7,"bg_panel",524288,1,[[0,-645,[5,564,599]],[11,1,0,-646,103]]],[7,"bg_frame",524288,1,[[0,-647,[5,604,626]],[5,0,-648,104]]],[2,"deco",524288,1,[[0,-649,[5,186,48]],[5,0,-650,105]],[1,0,255,0]],[2,"title_backpack",524288,101,[[0,-651,[5,98,59]],[3,-652,106]],[1,0,6,0]],[57,"Label",524288,36,[[0,-653,[5,128,48]],[5,0,-654,108]],[1,0.800000011920929,0.800000011920929,1]],[57,"Label",524288,37,[[0,-655,[5,90,42]],[5,0,-656,114]],[1,0.800000011920929,0.800000011920929,1]],[14,"bar",524288,53,[[[8,-657,[5,10,156.25],[0,0,0]],-658],4,1],[1,-11,-125,0]],[129,"scrollView<ScrollView>",0.23,0.75,false,66,102],[7,"Label",524288,14,[[0,-659,[5,73,47]],[5,0,-660,126]]],[7,"Label",524288,15,[[0,-661,[5,73,47]],[5,0,-662,129]]],[7,"Label",524288,16,[[0,-663,[5,73,47]],[5,0,-664,132]]],[7,"bg_panel",524288,6,[[0,-665,[5,564,599]],[11,1,0,-666,160]]],[7,"bg_frame",524288,6,[[0,-667,[5,604,626]],[5,0,-668,161]]],[2,"title_backpack",524288,109,[[0,-669,[5,98,59]],[3,-670,162]],[1,0,6,0]],[14,"bar",524288,54,[[[8,-671,[5,10,156.25],[0,0,0]],-672],4,1],[1,-11,-125,0]],[95,"bones_04",524288,[[17,[20,"joint1_025",524288,-673,[1,-181.37918090820312,22.29253578186035,186.65782165527344],[3,-0.3627675473690033,0.19298096001148224,-0.5724924802780151,0.7095142006874084],[1,-74.53234100341797,-27.658985137939453,-72.25032806396484]]],1,4],[3,-0.7071067690849304,0,0,0.7071067690849304],[1,-90,0,0]],[131,"home",[4],[102,"b59e0761-ea04-4a78-b7c0-1672219c7f18"],[132,[133,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[134,0.1,1,30,1207.0369632699158,0.2980392156862745],[135],[136,[4,4292993505]],[137]]],[116,79],[138,2],[139,9,172,5,173],[51,"Shop<Animation>",9,[80,81,82]],[76,"0:00",0,20,20,147,[4,4294175869]],[77,"124/150",2,20,20,20,148,[4,4286052598]],[39,1,0,149],[78,220,0.5,59,178],[76,"0:00",0,20,20,152,[4,4294175869]],[77,"124/150",2,20,20,20,153,[4,4286052598]],[39,1,0,154],[78,220,0.5,60,182],[71,"btn_expand<Button>",63,[[18,"bc2c4zW09lHwpndXfuPHzZv","showSubBtns",12]],[4,4292269782],63],[71,"btn_expand<Button>",64,[[18,"bc2c4zW09lHwpndXfuPHzZv","hideSubBtns",12]],[4,4292269782],64],[39,1,0,161],[140,1,53,162,186],[142,60,1,162],[51,"sub_btns<Animation>",12,[152,153]],[39,1,0,169],[141,1,54,190],[130,"scrollView<ScrollView>",0.23,0.75,false,70,110,191],[58,"RootNode (gltf orientation matrix)",524288,55,[-674],[3,-0.7071067690849304,0,0,0.7071067690849304],[1,-90,0,0]],[36,"RootNode (model correction matrix)",524288,193,[-675]],[58,"c2475420cd6847fe9bd9c7a79c391504.fbx",524288,194,[-676],[3,0.7071067690849304,0,0,0.7071067690849304],[1,90,0,0]],[36,"(__autogen 0)",524288,195,[-677]],[36,"RootNode",524288,196,[73]],[36,"_rootJoint",524288,73,[170]],[27,"horse_neck_02",524288,17,[[34,"horse_head_05",524288,-678,[1,44.69350051879883,-1.7763568394002505e-15,4.173702716827393]]],[1,69.654052734375,5.551115123125783e-17,35.83054733276367],[3,0.023357117548584938,-0.2608059346675873,0.06097632646560669,0.9631804823875427],[1,4.429328918457031,-30.535913467407227,6.0432448387146]],[25,"arm_L_1_09",524288,112,[-679],[1,-4.367867946624756,86.39816284179688,15.557828903198242],[3,-0.33418962359428406,0.205036923289299,0.6241278052330017,0.6758266091346741],[1,-90.19727325439453,78.84963989257812,44.95587158203125]],[27,"arm_L_2_010",524288,200,[[20,"arm_L_3_011",524288,-680,[1,56.95232009887695,0,0],[3,-0.1330936849117279,0.3145368993282318,0.03977533057332039,0.9390263557434082],[1,-15.961404800415039,36.965145111083984,-0.5171347260475159]]],[1,56.95232009887695,1.4210854715202004e-14,0],[3,-1.12603276223676e-16,1.0400406539425234e-16,-0.7422215938568115,0.6701545715332031],[1,180,-180,-84.15798950195312]],[27,"head_012",524288,112,[[20,"head_up_013",524288,-681,[1,-46.13523483276367,0,106.88189697265625],[3,-0.08677973598241806,-0.21211417019367218,-0.007686755619943142,0.9733538627624512],[1,-9.917899131774902,-24.478853225708008,1.2520443201065063]]],[1,0,3.552713678800501e-15,74.31118774414062],[3,-0.002974923001602292,-0.008767294697463512,0.008455553092062473,0.9999213814735413],[1,-0.33242902159690857,-1.0018917322158813,0.9718942642211914]],[25,"arm_R_1_014",524288,112,[-682],[1,-4.367869853973389,-86.39820098876953,15.557594299316406],[3,0.9056615233421326,0.32793959975242615,0.23788447678089142,-0.12507514655590057],[1,-153.0854949951172,-37.36450958251953,32.309852600097656]],[27,"arm_R_2_015",524288,203,[[20,"arm_R_3_016",524288,-683,[1,-56.95223617553711,-0.000054925076256040484,-0.00029895539046265185],[3,0.19965414702892303,0.45776379108428955,0.17951339483261108,0.8475644588470459],[1,11.498085021972656,53.74737548828125,29.149311065673828]]],[1,-56.95234680175781,-0.0000875578261911869,-0.0002197673311457038],[3,8.791292884779978e-7,-3.4825106354219315e-7,-0.7055299878120422,0.7086800932884216],[1,0.009705619886517525,0.009606166742742062,-89.7447509765625]],[25,"leg_L_1_017",524288,111,[-684],[1,-3.6130809783935547,52.10166931152344,-36.70555877685547],[3,-0.5720439553260803,0.28909969329833984,0.3109954297542572,0.7017613053321838],[1,-81.20193481445312,49.98330307006836,6.069437026977539]],[27,"leg_L_2_018",524288,205,[[34,"leg_L_3_019",524288,-685,[1,38.46443557739258,-5.684341886080802e-14,-2.842170943040401e-14]]],[1,38.5178108215332,-0.9413840770721436,-1.4210854715202004e-14],[3,1.6814806723608514e-17,-3.395117163854089e-17,0.18055659532546997,0.9835646152496338],[1,2.7788072034650325e-15,-4.465644095285291e-15,20.804363250732422]],[25,"leg_R_1_020",524288,111,[-686],[1,-3.6130800247192383,-52.10169982910156,-36.705230712890625],[3,0.4560290277004242,0.5254243016242981,0.5672618746757507,-0.4406594932079315],[1,-93.41167449951172,-101.28886413574219,-1.1873219013214111]],[27,"leg_R_2_021",524288,207,[[34,"leg_R_3_022",524288,-687,[1,-38.464744567871094,0.00003783630018006079,0.00001482806237618206]]],[1,-38.51786422729492,0.9413783550262451,0.000040950948459794745],[3,0.0000017519461152915028,-0.000002129625727320672,0.5735651254653931,0.819159984588623],[1,0.0008900095126591623,-0.0009210844873450696,69.9984130859375]],[143,6,72,55],[51,"Home<Animation>",3,[184,185,186]],[96,"UICamera_Canvas",524288,4,[-688],[1,0,0,1000]],[144,0,1073741824,480,2000,42467328,211,[4,4278190080]]],0,[0,0,1,0,-2,188,0,-1,100,0,-2,155,0,-3,156,0,-4,157,0,-5,101,0,-6,36,0,-7,37,0,-8,65,0,-9,66,0,-10,14,0,-11,15,0,-12,16,0,0,2,0,-2,173,0,-1,80,0,-2,120,0,-3,121,0,-4,81,0,-5,49,0,-6,19,0,-7,20,0,-8,21,0,-9,23,0,0,3,0,0,3,0,21,209,0,22,174,0,23,188,0,24,210,0,0,3,0,-4,210,0,-1,57,0,-2,77,0,-3,115,0,-4,9,0,-5,13,0,-6,61,0,0,4,0,25,212,0,0,4,0,0,4,0,-1,56,0,-2,75,0,-3,114,0,-7,6,0,-8,211,0,0,5,0,0,5,0,0,5,0,-1,117,0,-2,118,0,-3,18,0,-4,30,0,-5,31,0,-6,32,0,-7,33,0,0,6,0,-2,209,0,-1,108,0,-2,166,0,-3,167,0,-4,109,0,-5,69,0,-6,70,0,-7,72,0,0,7,0,0,7,0,0,7,0,-1,35,0,-2,38,0,-3,39,0,-4,40,0,-5,41,0,-6,42,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,43,0,-2,44,0,-3,45,0,-4,46,0,-5,47,0,-6,48,0,0,9,0,0,9,0,-3,174,0,-4,175,0,-1,78,0,-2,116,0,-3,79,0,-5,58,0,0,10,0,0,10,0,0,10,0,16,179,0,17,177,0,18,176,0,0,10,0,-1,145,0,-2,146,0,-3,147,0,-4,148,0,-5,59,0,0,11,0,0,11,0,0,11,0,16,183,0,17,181,0,18,180,0,0,11,0,-1,150,0,-2,151,0,-3,152,0,-4,153,0,-5,60,0,0,12,0,0,12,0,0,12,0,26,185,0,27,184,0,28,189,0,0,12,0,-5,189,0,-1,62,0,0,13,0,0,13,0,-1,50,0,-2,51,0,-3,52,0,-6,34,0,0,14,0,0,14,0,5,14,0,0,14,0,0,14,0,0,14,0,-1,163,0,0,15,0,0,15,0,5,15,0,0,15,0,0,15,0,0,15,0,-1,164,0,0,16,0,0,16,0,5,16,0,0,16,0,0,16,0,0,16,0,-1,165,0,3,17,0,3,17,0,-3,199,0,3,17,0,-5,111,0,3,17,0,3,17,0,0,18,0,0,18,0,5,18,0,0,18,0,0,18,0,-1,119,0,0,19,0,0,19,0,5,19,0,0,19,0,0,19,0,-1,123,0,0,20,0,0,20,0,5,20,0,0,20,0,0,20,0,-1,124,0,0,21,0,0,21,0,0,21,0,-1,125,0,-2,22,0,-3,82,0,0,22,0,0,22,0,5,22,0,0,22,0,0,22,0,-1,126,0,0,23,0,0,23,0,0,23,0,-1,24,0,-2,26,0,-3,28,0,0,24,0,0,24,0,-1,83,0,-2,86,0,-3,129,0,-4,25,0,0,25,0,0,25,0,5,25,0,0,25,0,0,25,0,-1,87,0,0,26,0,0,26,0,-1,88,0,-2,91,0,-3,131,0,-4,27,0,0,27,0,0,27,0,5,27,0,0,27,0,0,27,0,-1,92,0,0,28,0,0,28,0,-1,93,0,-2,96,0,-3,133,0,-4,29,0,0,29,0,0,29,0,5,29,0,0,29,0,0,29,0,-1,97,0,0,30,0,0,30,0,5,30,0,0,30,0,0,30,0,-1,134,0,0,31,0,0,31,0,5,31,0,0,31,0,0,31,0,-1,135,0,0,32,0,0,32,0,5,32,0,0,32,0,0,32,0,-1,136,0,0,33,0,0,33,0,5,33,0,0,33,0,0,33,0,-1,137,0,0,34,0,0,34,0,0,34,0,5,34,0,0,34,0,0,34,0,0,35,0,0,35,0,5,35,0,0,35,0,0,35,0,-1,99,0,0,36,0,0,36,0,5,36,0,0,36,0,0,36,0,-1,159,0,0,37,0,0,37,0,5,37,0,0,37,0,0,37,0,-1,160,0,0,38,0,0,38,0,5,38,0,0,38,0,0,38,0,-1,103,0,0,39,0,0,39,0,5,39,0,0,39,0,0,39,0,-1,104,0,0,40,0,0,40,0,5,40,0,0,40,0,0,40,0,-1,105,0,0,41,0,0,41,0,5,41,0,0,41,0,0,41,0,-1,106,0,0,42,0,0,42,0,5,42,0,0,42,0,0,42,0,-1,107,0,0,43,0,0,43,0,0,43,0,5,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,5,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,5,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,5,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,5,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,5,48,0,0,48,0,0,48,0,0,49,0,0,49,0,5,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,-1,98,0,-2,140,0,0,51,0,0,51,0,0,51,0,-1,141,0,-2,142,0,0,52,0,0,52,0,0,52,0,-1,143,0,-2,144,0,0,53,0,0,53,0,0,53,0,-4,187,0,-1,161,0,0,54,0,0,54,0,0,54,0,-4,191,0,-1,169,0,0,55,0,0,55,0,-1,193,0,0,56,0,0,56,0,0,56,0,-1,74,0,0,57,0,0,57,0,0,57,0,-1,76,0,0,58,0,0,58,0,0,58,0,-1,138,0,0,59,0,0,59,0,-3,179,0,-1,149,0,0,60,0,0,60,0,-3,183,0,-1,154,0,0,61,0,0,61,0,-2,68,0,0,62,0,0,62,0,-1,63,0,-2,64,0,0,63,0,0,63,0,-3,184,0,0,64,0,0,64,0,-3,185,0,0,65,0,0,65,0,5,65,0,0,65,0,0,66,0,-2,162,0,-2,67,0,0,67,0,0,67,0,0,67,0,-1,102,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,5,69,0,0,69,0,0,70,0,-2,192,0,-2,71,0,0,71,0,0,71,0,0,71,0,-1,110,0,0,72,0,0,72,0,-1,198,0,-2,113,0,3,73,0,3,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,-2,172,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,-1,122,0,0,82,0,0,82,0,-1,127,0,0,83,0,0,83,0,-1,84,0,0,84,0,0,84,0,-1,85,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,-1,128,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,-1,89,0,0,89,0,0,89,0,-1,90,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,-1,130,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,-1,94,0,0,94,0,0,94,0,-1,95,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,-1,132,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,-1,139,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,-1,158,0,0,102,0,0,102,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,104,0,0,105,0,0,105,0,0,105,0,0,106,0,0,106,0,0,106,0,0,107,0,0,107,0,0,107,0,0,108,0,0,108,0,0,108,0,0,109,0,0,109,0,-1,168,0,0,110,0,0,110,0,-1,112,0,-2,205,0,-3,207,0,-1,200,0,-2,202,0,-3,203,0,0,113,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,-2,176,0,0,148,0,-2,177,0,0,149,0,-2,178,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,-2,180,0,0,153,0,-2,181,0,0,154,0,-2,182,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,-2,186,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,0,167,0,0,168,0,0,168,0,0,169,0,-2,190,0,3,170,0,-1,194,0,-1,195,0,-1,196,0,-1,197,0,3,199,0,-1,201,0,3,201,0,3,202,0,-1,204,0,3,204,0,-1,206,0,3,206,0,-1,208,0,3,208,0,-1,212,0,29,171,1,3,4,2,3,4,3,3,4,4,3,171,5,3,9,7,3,12,8,3,68,10,3,13,11,3,13,12,3,61,17,3,170,53,3,66,54,3,70,55,3,72,73,3,197,162,30,187,170,3,198,174,31,175,191,32,192,688],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,178,182,184,184,184,184,185,185,185,185,186,188,189,190],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,7,8,9,1,1,4,1,1,4,1,1,1,4,1,1,1,1,1,1,1,4,7,8,9,1,1,1,1,1,1,4,7,8,9,1,1,1,1,1,1,4,7,8,9,1,4,1,1,4,1,1,4,1,1,4,1,1,4,1,1,1,-1,-2,-3,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,4,7,8,9,1,1,4,7,8,9,1,4,7,8,9,1,1,1,4,1,1,4,1,1,4,4,1,1,4,1,1,4,1,1,4,1,1,4,1,1,4,1,-1,-2,1,4,1,4,1,1,1,1,1,1,1,4,7,8,9,1,-1,14,15,-1,10,33,4,1,4,1,4,1,4,1,-1,-2,-3,1,1,1,4,7,8,9,4,7,8,9,1,34,10,1],[21,129,5,21,130,5,131,5,22,22,132,1,5,133,12,134,13,6,6,2,3,4,135,23,23,136,24,24,137,138,25,25,139,140,14,141,15,16,7,7,2,3,4,17,14,142,15,16,7,7,2,3,4,17,14,143,15,16,7,7,2,3,4,17,1,144,1,1,145,1,1,146,1,1,147,1,1,148,149,150,151,152,153,154,18,155,18,156,18,157,26,27,158,26,27,28,28,29,30,159,160,31,5,32,12,161,33,13,162,11,11,2,3,4,163,11,11,2,3,4,6,6,2,3,4,34,164,8,8,165,8,8,166,8,8,31,167,35,35,168,36,36,169,37,37,170,38,38,171,39,39,172,173,40,41,41,42,42,43,5,32,12,33,13,6,6,2,3,4,34,174,19,20,10,10,175,43,44,44,45,45,46,46,176,177,178,179,180,47,47,29,2,3,4,30,2,3,4,48,0,40,48]],[[{"name":"text_buchongjingli","rect":{"x":0,"y":0,"width":143,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":143,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[181]],[[{"name":"ic_huchcy","rect":{"x":35,"y":15,"width":81,"height":112},"offset":{"x":0.5,"y":4},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[182]],[[{"name":"btn_friends","rect":{"x":6,"y":5,"width":92,"height":105},"offset":{"x":-1,"y":-2.5},"originalSize":{"width":106,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[183]],[[{"name":"att_fire","rect":{"x":0,"y":0,"width":36,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[184]],[[{"name":"btn_purple","rect":{"x":0,"y":0,"width":200,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[185]],[[{"name":"title_bg","rect":{"x":0,"y":0,"width":270,"height":94},"offset":{"x":0,"y":0},"originalSize":{"width":270,"height":94},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[186]],[[{"name":"btn_blue","rect":{"x":0,"y":0,"width":154,"height":59},"offset":{"x":0,"y":0},"originalSize":{"width":154,"height":59},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[187]],[[{"name":"btn_hecheng","rect":{"x":0,"y":0,"width":65,"height":68},"offset":{"x":0,"y":0},"originalSize":{"width":65,"height":68},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[188]],[[{"name":"text_upgrade","rect":{"x":0,"y":0,"width":75,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":75,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[189]],[[{"name":"text_buchongtili","rect":{"x":0,"y":0,"width":143,"height":51},"offset":{"x":0,"y":0},"originalSize":{"width":143,"height":51},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[190]],[[{"name":"bot_frame","rect":{"x":0,"y":0,"width":622,"height":217},"offset":{"x":0,"y":0},"originalSize":{"width":622,"height":217},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[191]],[[{"name":"text_goumai","rect":{"x":0,"y":0,"width":119,"height":51},"offset":{"x":0,"y":0},"originalSize":{"width":119,"height":51},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[192]],[[[83,"heroslot"],[88,"heroslot",1082130432,[-14,-15,-16,-17,-18,-19],[[15,-2,[6,"810qT8VFxEGo2daN6oybxA"],[5,95,122]],[145,-13,[6,"d11GIqvUdM+pgdx4CLun46"],[11,12,13,14],[15,16,17,18,19],[20,21,22,23,24,25,26,27,28,29],[30,31,32],-12,-11,-10,-9,-8,[-3,-4,-5,-6,-7]]],[13,"01nipPOcVJc4nzeMPnQF8F",-1,33],[1,-522,36,0]],[89,"stars",1082130432,1,[-22,-23,-24,-25,-26],[[107,-20,[6,"7dQnzLRTtLUI7AklpJn+G8"],[5,63,20],[0,0,0.5]],[121,1,-8,true,-21,[6,"d4GkxfxE9Ly431q/s6S7fJ"]]],[13,"57mfbVUAFC44FUh46x8GvH",1,7],[1,-23.3,-42.1,0]],[59,"bg",1082130432,1,[[[15,-27,[6,"aa52y6UaxEFaGyFPnkkIQD"],[5,93,121]],-28],4,1],[13,"f9bY1fz9lA6ajY9IjksyJD",1,0]],[59,"image",1082130432,1,[[[15,-29,[6,"e6OFlUrZlI94B/MQVe8200"],[5,81,112]],-30],4,1],[13,"9dI+uM8DxLk7V6vqdzt58+",1,1]],[21,"star0",1082130432,2,[[[15,-31,[6,"e0YaoalFZDSqsdolcMjE0p"],[5,19,19]],-32],4,1],[13,"a78ZGxfC5HFrTp3/pR+fno",1,2],[1,9.5,0,0]],[21,"star1",1082130432,2,[[[15,-33,[6,"55NVpOJ3tJ/YPUiGCIfdGB"],[5,19,19]],-34],4,1],[13,"48znnORgVC8ossGcNH7hOw",1,3],[1,20.5,0,0]],[21,"star2",1082130432,2,[[[15,-35,[6,"7eRlvwetZB0bX+MrmC79CS"],[5,19,19]],-36],4,1],[13,"6cu+E1AHBEt5fGSDYwJ3Hg",1,4],[1,31.5,0,0]],[21,"star3",1082130432,2,[[[15,-37,[6,"b6FMxtb/lLHoI3fZl1Zp9A"],[5,19,19]],-38],4,1],[13,"72OVuAxMZDq6Nsqw6G4pg8",1,5],[1,42.5,0,0]],[21,"star4",1082130432,2,[[[15,-39,[6,"79SG5QsQlPhZQy30O+OYxh"],[5,19,19]],-40],4,1],[13,"05LACNYapFy7VosCT1XyAF",1,6],[1,53.5,0,0]],[21,"attribute",1082130432,1,[[[15,-41,[6,"e6BTkri2RMx7EcNcGkWQQb"],[5,36,36]],-42],4,1],[13,"45IH2syXpCNIOyxpffjoaf",1,8],[1,39.2,48.3,0]],[21,"level",1082130432,1,[[[15,-43,[6,"45CgrBs8pIyJ1RCZZfnvBU"],[5,56,16.1]],-44],4,1],[13,"eca9wa3thOrbRU9T7ftNOA",1,9],[1,0,45,0]],[21,"rank",1082130432,1,[[[15,-45,[6,"a5CAPzZGNGmIhJD+yw9Ckd"],[5,32,30]],-46],4,1],[13,"daK5Baq8NGOa7RmRP2S/tk",1,10],[1,-36,-44,0]],[22,3,[6,"c6tYGYdgRCGKBKdc2NzV0D"]],[22,4,[6,"0334XznK9HrbJD+flbJ3Of"]],[22,5,[6,"2anQnA1/lHDZGRwIFlI5Zz"]],[22,6,[6,"2902dEXKhCs5NUqZpwbtKr"]],[22,7,[6,"7eLiy6vMhHnaULYTXyipyB"]],[22,8,[6,"a9hJkIJ4tCr6a1hh4DOhI5"]],[22,9,[6,"8fJggN0FJK8pT5MBHONMr2"]],[22,10,[6,"83isq7RpdMpooYZon0Pvqh"]],[127,"LV.39",6,16,2,11,[6,"7f4z8SrVJFFYY2MsdDcEGZ"]],[117,0,12,[6,"6cv2CyRSxDMbSqFABptVLh"]]],0,[0,12,1,0,0,1,0,-1,15,0,-2,16,0,-3,17,0,-4,18,0,-5,19,0,35,13,0,36,20,0,37,22,0,38,14,0,39,21,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,-4,10,0,-5,11,0,-6,12,0,0,2,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,0,3,0,-2,13,0,0,4,0,-2,14,0,0,5,0,-2,15,0,0,6,0,-2,16,0,0,7,0,-2,17,0,0,8,0,-2,18,0,0,9,0,-2,19,0,0,10,0,-2,20,0,0,11,0,-2,21,0,0,12,0,-2,22,0,13,1,46],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,15,16,17,18,19,20,22],[6,6,6,6,6,6,6,6,6,6,6,-1,-2,-3,-4,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,6,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,49,193,194,195,196,50,197,198,199,200,201,202,203,204,205,206,51,207,208,52,209,210,0,52,51,9,9,9,9,9,49,50]],[[{"name":"text_subscribe","rect":{"x":0,"y":0,"width":115,"height":29},"offset":{"x":0,"y":0},"originalSize":{"width":115,"height":29},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[211]],[[{"name":"banner_green","rect":{"x":0,"y":0,"width":178,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":178,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[212]],[[{"name":"btns_hero","rect":{"x":0,"y":0,"width":186,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":186,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[213]],[[{"name":"btn_shop","rect":{"x":2,"y":2,"width":79,"height":108},"offset":{"x":-2,"y":-1},"originalSize":{"width":87,"height":110},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[214]],[[{"name":"btn_purple2","rect":{"x":0,"y":0,"width":150,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":54},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[215]],[[{"name":"att_water","rect":{"x":0,"y":0,"width":36,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[216]],[[{"name":"btn_message","rect":{"x":0,"y":0,"width":75,"height":67},"offset":{"x":0,"y":0},"originalSize":{"width":75,"height":67},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[217]],[[{"name":"att_wind","rect":{"x":0,"y":0,"width":36,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[218]],[[{"name":"title_backpack","rect":{"x":0,"y":0,"width":98,"height":59},"offset":{"x":0,"y":0},"originalSize":{"width":98,"height":59},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[219]],[[{"name":"txt_rongyu","rect":{"x":0,"y":0,"width":58,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":58,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[220]],[[{"name":"btn_up_blue","rect":{"x":0,"y":0,"width":120,"height":49},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":49},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[221]],[[{"name":"shop_figure","rect":{"x":0,"y":0,"width":415,"height":446},"offset":{"x":0,"y":0},"originalSize":{"width":415,"height":446},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[222]],[[{"name":"a_highlight","rect":{"x":5,"y":6,"width":57,"height":50},"offset":{"x":0.5,"y":-2},"originalSize":{"width":66,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[223]],[[{"name":"txt_liuyan","rect":{"x":0,"y":0,"width":56,"height":35},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[224]],[[{"name":"shop_title_bg","rect":{"x":0,"y":0,"width":301,"height":106},"offset":{"x":0,"y":0},"originalSize":{"width":301,"height":106},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[225]],[[{"name":"ic_shilf","rect":{"x":25,"y":42,"width":114,"height":83},"offset":{"x":7,"y":-8.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[226]]]]
